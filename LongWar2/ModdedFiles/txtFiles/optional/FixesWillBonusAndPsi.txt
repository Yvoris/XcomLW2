MOD_NAME=Fixes will bonus and psi issues 1.1
AUTHOR=Oakeman
DESCRIPTION=Fixes lots of places where bonus will from officer perks, combat smoke and battle fatigue/fallen comrades didn't apply. Plus some other issues with psi to hit.

UPK_FILE=XComGame.upk

//Change 00 to 04 to get +40 will when defending against psi attacks with combat stim active
ALIAS = DefensiveCombatStim : 00

//Change 00 to 04 to get +40 will when using psi attacks with combat stim active
ALIAS = OffensiveCombatStim : 00

[ADD_EXPORT_ENTRY]
<Core.IntProperty> // Type
<NullRef>          // ParentClassRef
<XGUnit.RecordMoraleLoss> // OwnerRef
<ReturnValue>         // NameIdx
<NullRef>          // ArchetypeRef
<%u0x00000000>  // flags H
<%u0x00070004>  // flags L
<%u40>          // serial size
<%u0>           // serial offset
<%u0>           // export flags
<%u0>           // net objects count
<%u0>           // GUID1, zero if net objects count == 0
<%u0>           // GUID2, zero if net objects count == 0
<%u0>           // GUID3, zero if net objects count == 0
<%u0>           // GUID4, zero if net objects count == 0
<%u0>           // unknown, zero if net objects count == 0

OBJECT=XGUnit.RecordMoraleLoss.ReturnValue
REL_OFFSET=16   // skip PrevObjRef + Empty DefaultProperties List + NextObjRef
[MODDED_CODE]
<%s1>		    // ArrayDim
<%s0>		    // ElementSize
<%u0x00000580>  // flags L ReturnParam, OutParam, Param
<%u0x00000000>  // flags H
<None>          // CategoryIndex
<NullRef>	    // ArrayEnumRef


OBJECT=XGUnit.RecordMoraleLoss
FIND_CODE=53 00 00 00:END
MODDED_CODE=<%u0x00024002> //Function flags = public, defined


OBJECT=XGUnit.RecordMoraleLoss.iLoss
REL_OFFSET=16   // skip PrevObjRef + Empty DefaultProperties List + NextObjRef
[MODDED_CODE]
<%s1>		    // ArrayDim
<%s0>		    // ElementSize
<%u0x00000090>  // flags L OptionalParam, Param
<%u0x00000000>  // flags H
<None>          // CategoryIndex
<NullRef>	    // ArrayEnumRef


//0 or no input for total will
//1 for just the bonus will
//2 for total will + damping
//3 for just the bonus will + damping
//iLoss = 0
//GetWill
//
//iLoss = 1
//
//iLoss = 2
//GetWill
//Damping
//
//iLoss = 3
//Damping
//
//iLoss = 4
//GetWill
//CombatStim
//
//iLoss = 5
//CombatStim
//
//iLoss = 6
//GetWill
//Damping
//CombatStim
//
//iLoss = 7
//Damping
//CombatStim
OBJECT=XGUnit.RecordMoraleLoss:AUTO

[REPLACEMENT_CODE]
49 [@] ( 2C 00 15 ) 

//E7 70 1F <%t "Test! RecordMoraleLoss: iLoss = "> 38 53 00 <.iLoss> 16 2A 16

0F 00 <.ReturnValue> 2C 00

07 [@IfGetWill] 9A 9C 00 <.iLoss> 2C 01 16 2C 00 16
	A1 00 <.ReturnValue> 1B <GetWill> 16 16
[#IfGetWill]

07 [@IfCombatDrugs] 2D 01 <XGUnitNativeBase.m_bInCombatDrugs> 
	A1 00 <.ReturnValue> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 2C 14 ) 16 
[#IfCombatDrugs]
07 [@IfDamping] 9A 9C 00 <.iLoss> 2C 02 16 2C 02 16
	07 [@IfDamping] 19 1B <GetCharacter> 16 [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1C 16 ) 
		A1 00 <.ReturnValue> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 2C 14 ) 16 
[#IfDamping]

07 [@IfCombatStim] 9A 9C 00 <.iLoss> 2C 04 16 2C 04 16
	//if((GetAppliedAbility(31)) != none)
    07 [@IfCombatStim] 77 1B <GetAppliedAbility> 2C 1F 16 2A 16 
        //iLoss += 40;
        A1 00 <.ReturnValue> 2C 28 16 
[#IfCombatStim]

07 [@IfInternational] 19 1B <GetCharacter> 16 [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 9C 16 ) 
	A1 00 <.ReturnValue> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CalcInternationalWillBonus.ReturnValue> 00 ( 1B <CalcInternationalWillBonus> 16 ) 16 
[#IfInternational]
07 [@IfTerra] 82 19 1B <GetSquad> 16 [@] <XGSquadNativeBase.SquadHasStarOfTerra.ReturnValue> 00 ( 1B <SquadHasStarOfTerra> 27 16 ) 18 [@] ( 81 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CharacterHasProperty.ReturnValue> 00 ( 1B <CharacterHasProperty> 1B <GetCharType> 16 2C 03 16 ) 16 16 ) 
	A1 00 <.ReturnValue> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.TERRA_WILL> 00 ( 01 <XGTacticalGameCoreNativeBase.TERRA_WILL> ) 16 
[#IfTerra]
A1 00 <.ReturnValue> 92 1B <GetBattleFatigueWillPenalty> 16 1B <GetFallenComradesWillPenalty> 16 16 16 

//E7 70 1F <%t "Test! RecordMoraleLoss: Return = "> 38 53 00 <.ReturnValue> 16 2A 16

04 00 <.ReturnValue>
53 


OBJECT=XGAbilityTree.ApplyEffectsToTarget:AUTO

[REPLACEMENT_CODE]
//iAbilityEffect = 0;
0F 00 <.iAbilityEffect> 25 
[#label001]
//if(iAbilityEffect < 52) [Loop If]
07 [@label076] 96 00 <.iAbilityEffect> 2C 34 16 
    //if(!AbilityHasEffect(kAbility.iType, iAbilityEffect))
    07 [@label002] 81 1B <AbilityHasEffect> 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 00 <.iAbilityEffect> 16 16 
    //else
    06 [@label075] 
        [#label002]
        //switch(iAbilityEffect)
        05 <.iAbilityEffect> 00 00 <.iAbilityEffect> 
            //case 0:
            0A [@label003] 25 
                //break;
                06 [@label075] 
            [#label003]
            //case 1:
            0A [@label009] 26 
                //if(kAbility.GetType() == 11)
                07 [@label004] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 0B 16 
                //else
                06 [@label008] 
                    [#label004]
                    //if(kAbility.GetType() == 37)
                    07 [@label005] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 25 16 
                        //ProcessPsiBombEffects(kAbility, kTarget);
                        1B <ProcessPsiBombEffects> 00 <.kAbility> 00 <.kTarget> 16 
                    //else
                    06 [@label008] 
                        [#label005]
                        //if((kAbility.GetType() == 53) && kAbility.GetPrimaryTarget() != kTarget)
                        07 [@label008] 82 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 35 16 18 [@] ( 77 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 00 <.kTarget> 16 16 ) 
                            //kDamageType = class'XComDamageType_Bullet';
                            0F 00 <.kDamageType> 20 <Class.XComDamageType_Bullet> 
                            //if(kAbility.m_kWeapon != none)
                            07 [@label007] 77 19 00 <.kAbility> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) 2A 16 
                                //if(kAbility.m_kWeapon.ItemType() == 17)
                                07 [@label006] 9A 38 3A 19 19 00 <.kAbility> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) [@] <XGItem.ItemType.ReturnValue> 00 ( 1B <ItemType> 16 ) 38 3A 24 11 16 
                                    //kDamageType = class'XComDamageType_Plasma';
                                    0F 00 <.kDamageType> 20 <Class.XComDamageType_Plasma> 
                                //else
                                06 [@label007] 
                                    [#label006]
                                    //if(kAbility.m_kWeapon.ItemType() == 11)
                                    07 [@label007] 9A 38 3A 19 19 00 <.kAbility> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) [@] <XGItem.ItemType.ReturnValue> 00 ( 1B <ItemType> 16 ) 38 3A 24 0B 16 
                                        //kDamageType = class'XComDamageType_Laser';
                                        0F 00 <.kDamageType> 20 <Class.XComDamageType_Laser> 
                                    [#label007]
                            //kPawn = kTarget.GetPawn();
                            0F 00 <.kPawn> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetPawn.ReturnValue> 00 ( 1B <GetPawn> 16 ) 
                            //kPawn.TakeDirectDamage(class'XComDamageType'.static.CreateEvent(kAbility.GetActualDamage(), kAbility.m_kUnit, kPawn.GetHeadLocation(), vector(kTarget.Rotation) * float(-10), kDamageType,, kAbility.m_kUnit));
                            19 00 <.kPawn> [@] <NullRef> 00 ( 1B <TakeDirectDamage> 12 20 <Class.XComDamageType> [@] <XComDamageType.CreateEvent.ReturnValue> 00 ( 1B <CreateEvent> 19 00 <.kAbility> [@] <XGAbility_Targeted.GetActualDamage.ReturnValue> 00 ( 1B <GetActualDamage> 16 ) 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 19 00 <.kPawn> [@] <XComUnitPawn.GetHeadLocation.ReturnValue> 00 ( 1B <GetHeadLocation> 16 ) D4 38 39 19 00 <.kTarget> [@] <Engine.Actor.Rotation> 00 ( 01 <Engine.Actor.Rotation> ) 38 3F 1D <%i -10> 16 00 <.kDamageType> 4A 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 16 ) 16 ) 
                            //kBroadcastWorldMessage = class'UIWorldMessageMgr'.static.DamageDisplay(kTarget.Location, string(kAbility.m_iActualDamage) @ kTarget.m_sDamageImage, kTarget.m_eTeamVisibilityFlags, class'XComUIBroadcastWorldMessage_DamageDisplay');
                            0F 00 <.kBroadcastWorldMessage> 12 20 <Class.UIWorldMessageMgr> [@] <UIWorldMessageMgr.DamageDisplay.ReturnValue> 00 ( 1B <DamageDisplay> 19 00 <.kTarget> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) A8 38 53 19 00 <.kAbility> [@] <XGAbility_Targeted.m_iActualDamage> 00 ( 01 <XGAbility_Targeted.m_iActualDamage> ) 19 00 <.kTarget> [@] <XGUnit.m_sDamageImage> 00 ( 01 <XGUnit.m_sDamageImage> ) 16 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 20 <Class.XComUIBroadcastWorldMessage_DamageDisplay> 16 ) 
                            //if(kBroadcastWorldMessage != none)
                            07 [@label008] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                //XComUIBroadcastWorldMessage_DamageDisplay(kBroadcastWorldMessage).Init_DisplayDamage(1, kTarget.Location, kAbility.m_iActualDamage, kTarget.m_eTeamVisibilityFlags);
                                19 2E <Class.XComUIBroadcastWorldMessage_DamageDisplay> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_DisplayDamage> 24 01 19 00 <.kTarget> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 19 00 <.kAbility> [@] <XGAbility_Targeted.m_iActualDamage> 00 ( 01 <XGAbility_Targeted.m_iActualDamage> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                            [#label008]
                //break;
                06 [@label075] 
            [#label009]
            //case 2:
            0A [@label014] 2C 02 
                //kTarget.AddStatModifiers(kAbility.aTargetStats, kAbility);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <AddStatModifiers> 19 00 <.kAbility> [@] <XGAbility.aTargetStats> 00 ( 01 <XGAbility.aTargetStats> ) 00 <.kAbility> 16 ) 
                //if(kAbility.strTargetMessage != "")
                07 [@label012] 7B 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 1F <%t ""> 16 
                    //strMsg = kAbility.strTargetMessage;
                    0F 00 <.strMsg> 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 
                    //if(InStr(strMsg, "<HP/>") != -1)
                    07 [@label010] 9B 7E 00 <.strMsg> 1F <%t "<HP/>"> 4A 4A 4A 16 1D <%i -1> 16 
                        //ReplaceText(strMsg, "<HP/>", string(kAbility.aTargetStats[0]));
                        1B <ReplaceText> 00 <.strMsg> 1F <%t "<HP/>"> 38 53 1A 25 19 00 <.kAbility> [@] <XGAbility.aTargetStats> 00 ( 01 <XGAbility.aTargetStats> ) 16 
                    [#label010]
                    //if((WorldInfo.NetMode == NM_Standalone) && kAbility.m_kUnit.IsVisible() || kTarget.IsVisible())
                    07 [@label011] 82 9A 38 3A 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.NetMode> 00 ( 01 <Engine.WorldInfo.NetMode> ) 38 3A 24 00 16 18 [@] ( 84 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnitNativeBase.IsVisible.ReturnValue> 00 ( 1B <IsVisible> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <XGUnitNativeBase.IsVisible.ReturnValue> 00 ( 1B <IsVisible> 16 ) 16 ) 16 ) 
                        //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(strMsg, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor));
                        19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 00 <.strMsg> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 4A 4A 4A 4A 4A 16 ) 
                    //else
                    06 [@label012] 
                        [#label011]
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(strMsg, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_AbilityTargetMessage');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 00 <.strMsg> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 16 ) 
                        //if(kBroadcastWorldMessage != none)
                        07 [@label012] 77 00 <.kBroadcastWorldMessage> 2A 16 
                            //XComUIBroadcastWorldMessage_AbilityTargetMessage(kBroadcastWorldMessage).Init_AbilityTargetMessage(kAbility, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                            19 2E <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_AbilityTargetMessage> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        [#label012]
                //if((kAbility.GetType() == 13) && !kTarget.IsAlien_CheckByCharType())
                07 [@label013] 82 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 0D 16 18 [@] ( 81 19 00 <.kTarget> [@] <XGUnit.IsAlien_CheckByCharType.ReturnValue> 00 ( 1B <IsAlien_CheckByCharType> 16 ) 16 16 ) 
                    //kTarget.UnitSpeak(42);
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <UnitSpeak> 24 2A 4A 16 ) 
                [#label013]
                //break;
                06 [@label075] 
            [#label014]
            //case 3:
            0A [@label018] 2C 03 
                //if(kTarget.IsInState('Panicked'))
                07 [@label015] 19 00 <.kTarget> [@] <Core.Object.IsInState.ReturnValue> 00 ( 61 19 21 <Panicked> 4A 16 ) 
                    //kTarget.m_iPanicCounter = 0;
                    0F 19 00 <.kTarget> [@] <XGUnitNativeBase.m_iPanicCounter> 00 ( 01 <XGUnitNativeBase.m_iPanicCounter> ) 25 
                    //kTarget.SetMoves(0);
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <SetMoves> 25 16 ) 
                    //kTarget.GotoState('Inactive');
                    19 00 <.kTarget> [@] <NullRef> 00 ( 71 21 <Inactive> 4A 4A 4A 16 ) 
                [#label015]
                //if(Role == ROLE_Authority)
                07 [@label016] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //kTarget.UpdateUnitBuffs();
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <UpdateUnitBuffs> 16 ) 
                [#label016]
                //if(kTarget != kAbility.m_kUnit)
                07 [@label017] 77 00 <.kTarget> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 16 
                    //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(18), kTarget.GetLocation(), 3,,, m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                    0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 12 16 ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 4A 4A 01 <Engine.Actor.m_eTeamVisibilityFlags> 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                    //if(kBroadcastWorldMessage != none)
                    07 [@label017] 77 00 <.kBroadcastWorldMessage> 2A 16 
                        //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(18, kTarget.GetLocation(), 3, m_eTeamVisibilityFlags);
                        19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 12 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 01 <Engine.Actor.m_eTeamVisibilityFlags> 16 ) 
                    [#label017]
                //break;
                06 [@label075] 
            [#label018]
            //case 5:
            0A [@label020] 2C 05 
                //if(Role == ROLE_Authority)
                07 [@label019] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //kTarget.AddSuppressor(kAbility.m_kUnit);
                    19 00 <.kTarget> [@] <XGUnitNativeBase.AddSuppressor.ReturnValue> 00 ( 1B <AddSuppressor> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 16 ) 
                    //kTarget.UpdateUnitBuffs();
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <UpdateUnitBuffs> 16 ) 
                [#label019]
                //break;
                06 [@label075] 
            [#label020]
            //case 13:
            0A [@label024] 2C 0D 
                //if(Role == ROLE_Authority)
                07 [@label022] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //if(kAbility.strTargetMessage != "")
                    07 [@label021] 7B 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 1F <%t ""> 16 
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(kAbility.strTargetMessage, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_AbilityTargetMessage');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 16 ) 
                        //if(kBroadcastWorldMessage != none)
                        07 [@label021] 77 00 <.kBroadcastWorldMessage> 2A 16 
                            //XComUIBroadcastWorldMessage_AbilityTargetMessage(kBroadcastWorldMessage).Init_AbilityTargetMessage(kAbility, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                            19 2E <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_AbilityTargetMessage> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        [#label021]
                    //kTarget.BecomePossessed(kAbility);
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <BecomePossessed> 00 <.kAbility> 4A 16 ) 
                    //if(kAbility.m_kUnit.IsAI())
                    07 [@label022] 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnitNativeBase.IsAI.ReturnValue> 00 ( 1B <IsAI> 16 ) 
                        //kPod = XGAIPlayer(kAbility.m_kUnit.m_kPlayer).m_kOvermindHandler.m_kOvermind.GetPod(kAbility.m_kUnit);
                        0F 00 <.kPod> 19 19 19 2E <Class.XGAIPlayer> 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.m_kPlayer> 00 ( 01 <XGUnit.m_kPlayer> ) [@] <XGAIPlayer.m_kOvermindHandler> 00 ( 01 <XGAIPlayer.m_kOvermindHandler> ) [@] <XGAIPlayerOvermindHandler.m_kOvermind> 00 ( 01 <XGAIPlayerOvermindHandler.m_kOvermind> ) [@] <XGOvermind.GetPod.ReturnValue> 00 ( 1B <GetPod> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 16 ) 
                        //kPod.m_arrMembers.AddItem(kTarget);
                        55 19 00 <.kPod> [@] <XGPod.m_arrMembers> 00 ( 01 <XGPod.m_arrMembers> ) [@] ( 00 <.kTarget> 16 ) 
                    [#label022]
                //if((kAbility.iType == 39) && !kTarget.IsAlien_CheckByCharType())
                07 [@label023] 82 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 27 16 18 [@] ( 81 19 00 <.kTarget> [@] <XGUnit.IsAlien_CheckByCharType.ReturnValue> 00 ( 1B <IsAlien_CheckByCharType> 16 ) 16 16 ) 
                    //kAbility.m_kUnit.UnitSpeak(73);
                    19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <NullRef> 00 ( 1B <UnitSpeak> 24 49 4A 16 ) 
                [#label023]
                //break;
                06 [@label075] 
            [#label024]
            //case 12:
            0A [@label029] 2C 0C 
											
                //bPanicked = kTarget.PerformPanicTest(kAbility.m_kUnit.RecordMoraleLoss(), kAbility.m_kUnit, true);
                14 2D 00 <.bPanicked> 19 00 <.kTarget> [@] <XGUnit.PerformPanicTest.ReturnValue> 00 ( 1B <PerformPanicTest> 
						//92 
							19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 00 2C <!OffensiveCombatStim> 16 16 ) 
							//19 1B <GameCore> 16 [@] <XGTacticalGameCoreNativeBase.EXALT_LOOT3> 00 ( 01 <XGTacticalGameCoreNativeBase.EXALT_LOOT3> ) 
						//16 
					19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 
					27 
					4A 
				16 ) 
				
				//if(bPanicked)
                07 [@label027] 2D 00 <.bPanicked> 
					
					//kAbility.iDuration = kTarget.m_iPanicCounter * 2
					0F 19 00 <.kAbility> [@] <XGAbility.iDuration> 00 ( 01 <XGAbility.iDuration> ) 90 19 00 <.kTarget> [@] <XGUnitNativeBase.m_iPanicCounter> 00 ( 01 <XGUnitNativeBase.m_iPanicCounter> ) 2C 02 16
					
                    //kTarget.AddAbilityAffecting(kAbility);
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <AddAbilityAffecting> 00 <.kAbility> 16 ) 
                    //if(kAbility.strTargetMessage != "")
                    07 [@label026] 7B 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 1F <%t ""> 16 
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(kAbility.strTargetMessage, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_AbilityTargetMessage');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 16 ) 
                        //if(kBroadcastWorldMessage != none)
                        07 [@label026] 77 00 <.kBroadcastWorldMessage> 2A 16 
                            //XComUIBroadcastWorldMessage_AbilityTargetMessage(kBroadcastWorldMessage).Init_AbilityTargetMessage(kAbility, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                            19 2E <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_AbilityTargetMessage> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        [#label026]
                //else
                06 [@label028] 
                    [#label027]
                    //kAbilityTag = XGAbilityTag(XComEngine(class'Engine'.static.GetEngine()).LocalizeContext.FindTag("XGAbility"));
                    0F 00 <.kAbilityTag> 2E <Class.XGAbilityTag> 19 19 2E <Class.XComEngine> 12 20 <Engine.Engine> [@] <Engine.Engine.GetEngine.ReturnValue> 00 ( 1C <Engine.Engine.GetEngine> 16 ) [@] <XComEngine.LocalizeContext> 00 ( 01 <XComEngine.LocalizeContext> ) [@] <XGLocalizeContext.FindTag.ReturnValue> 00 ( 1B <FindTag> 1F <%t "XGAbility"> 16 ) 
                    //kAbilityTag.Ability = kAbility;
                    0F 19 00 <.kAbilityTag> [@] <XGAbilityTag.Ability> 00 ( 01 <XGAbilityTag.Ability> ) 00 <.kAbility> 
                    //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(class'XComLocalizer'.static.ExpandString(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_aExpandedLocalizedStrings[5]), kTarget.GetLocation(), 4,,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_ErrAbilityFail');
                    0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 12 20 <Class.XComLocalizer> [@] <XComLocalizer.ExpandString.ReturnValue> 00 ( 1B <ExpandString> 1A 2C 05 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.m_aExpandedLocalizedStrings> 00 ( 01 <XGTacticalGameCore.m_aExpandedLocalizedStrings> ) 4A 16 ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 04 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_ErrAbilityFail> 16 ) 
                    //if(kBroadcastWorldMessage != none)
                    07 [@label028] 77 00 <.kBroadcastWorldMessage> 2A 16 
                        //XComUIBroadcastWorldMessage_ErrAbilityFail(kBroadcastWorldMessage).Init_ErrAbilityFail(kAbility, kTarget.GetLocation(), 4, kTarget.m_eTeamVisibilityFlags);
                        19 2E <Class.XComUIBroadcastWorldMessage_ErrAbilityFail> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_ErrAbilityFail> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 04 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        0B 
                        0B 
                    [#label028]
                //break;
                06 [@label075] 
            [#label029]
            //case 22:
            0A [@label031] 2C 16 
                //kTarget.m_bRunAndGunActivated = true;
                14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bRunAndGunActivated> 00 ( 2D 01 <XGUnitNativeBase.m_bRunAndGunActivated> ) 27 
                //kTarget.UnitSpeak(57);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <UnitSpeak> 24 39 4A 16 ) 
                //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
                07 [@label030] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
                    //PlaySound(SoundCue(DynamicLoadObject("SoundUI.ActivateAbilityCue", class'SoundCue')), true);
                    1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.ActivateAbilityCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
                [#label030]
                //kTarget.m_bBuildAbilityDataDirty = true;
                14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bBuildAbilityDataDirty> 00 ( 2D 01 <XGUnitNativeBase.m_bBuildAbilityDataDirty> ) 27 
                //kTarget.BuildAbilities(true);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <BuildAbilities> 27 16 ) 
                //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).m_kTacticalHUD.m_kAbilityHUD.SetAbilityByIndex(0);
                19 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.m_kTacticalHUD> 00 ( 01 <XComPresentationLayer.m_kTacticalHUD> ) [@] <UITacticalHUD.m_kAbilityHUD> 00 ( 01 <UITacticalHUD.m_kAbilityHUD> ) [@] <NullRef> 00 ( 1B <SetAbilityByIndex> 25 16 ) 
                //break;
                06 [@label075] 
            [#label031]
            //case 7:
            0A [@label032] 2C 07 
                //kTarget.UnitSpeak(2);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <UnitSpeak> 24 02 4A 16 ) 
                //kTarget.Reload(kAbility.m_kWeapon);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <Reload> 19 00 <.kAbility> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) 16 ) 
                //break;
                06 [@label075] 
            [#label032]
            //case 14:
            0A [@label034] 2C 0E 
                //if(Role == ROLE_Authority)
                07 [@label033] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //XComTacticalController(GetALocalPlayerController()).PerformBerserk(kTarget);
                    19 2E <Class.XComTacticalController> 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <NullRef> 00 ( 1B <PerformBerserk> 00 <.kTarget> 4A 16 ) 
                    //if(kAbility.strTargetMessage != "")
                    07 [@label033] 7B 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 1F <%t ""> 16 
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(kAbility.strTargetMessage, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_AbilityTargetMessage');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 16 ) 
                        //if(kBroadcastWorldMessage != none)
                        07 [@label033] 77 00 <.kBroadcastWorldMessage> 2A 16 
                            //XComUIBroadcastWorldMessage_AbilityTargetMessage(kBroadcastWorldMessage).Init_AbilityTargetMessage(kAbility, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                            19 2E <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_AbilityTargetMessage> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        [#label033]
                //break;
                06 [@label075] 
            [#label034]
            //case 9:
            0A [@label037] 2C 09 
                //if(Role == ROLE_Authority)
                07 [@label036] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //if(kAbility.m_kUnit.GetCharacter().HasUpgrade(56))
                    07 [@label035] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 38 16 ) 
                        //kTarget.Stabilize();
                        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <Stabilize> 16 ) 
                        //kTarget.SetUnitHP(int((float(kTarget.GetUnitMaxHP()) * XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.0.330) + float(1)));
                        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <SetUnitHP> 38 44 AE AB 38 3F 19 00 <.kTarget> [@] <XGUnitNativeBase.GetUnitMaxHP.ReturnValue> 00 ( 1B <GetUnitMaxHP> 16 ) 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 1E <%f 0.33> ) 16 38 3F 26 16 16 ) 
                        //kTarget.GiveOneMoveAndOneAction();
                        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <GiveOneMoveAndOneAction> 16 ) 
                    [#label035]
                    //kTarget.AddRecoverFromCriticallyWoundedAction();
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <AddRecoverFromCriticallyWoundedAction> 16 ) 
                [#label036]
                //break;
                06 [@label075] 
            [#label037]
            //case 10:
            0A [@label039] 2C 0A 
                //kTarget.AddApplyAbilityEffectHiddenAction();
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <AddApplyAbilityEffectHiddenAction> 16 ) 
                //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
                07 [@label038] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
                    //PlaySound(SoundCue(DynamicLoadObject("SoundUI.GhostArmorOnCue", class'SoundCue')), true);
                    1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.GhostArmorOnCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
                [#label038]
                //break;
                06 [@label075] 
            [#label039]
            //case 8:
            0A [@label041] 2C 08 
                //if(Role == ROLE_Authority)
                07 [@label040] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //kTarget.Stabilize();
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <Stabilize> 16 ) 
                [#label040]
                //break;
                06 [@label075] 
            [#label041]
            //case 4:
            0A [@label043] 2C 04 
                //if(Role == ROLE_Authority)
                07 [@label042] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //kTarget.Flush(kAbility.m_kUnit);
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <Flush> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 16 ) 
                [#label042]
                //break;
                06 [@label075] 
            [#label043]
            //case 15:
            0A [@label045] 2C 0F 
                //if(Role == ROLE_Authority)
                07 [@label044] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //kTarget.GiveOneMoveAndOneAction();
                    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <GiveOneMoveAndOneAction> 16 ) 
                [#label044]
                //break;
                06 [@label075] 
            [#label045]
            //case 16:
            0A [@label048] 2C 10 
                //switch(kAbility.iType)
                05 <XGAbility.iType> 00 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 
                    //case 17:
                    0A [@label046] 2C 11 
                        //break;
                        06 [@label047] 
                    [#label046]
                    //default:
                    0A FF FF 
                        //break;
                        06 [@label047] 
                    [#label047]
                //break;
                06 [@label075] 
            [#label048]
            //case 6:
            0A [@label058] 2C 06 
                //if((kAbility.strTargetMessage != "") && kAbility.m_kUnit.IsVisible() || WorldInfo.NetMode != NM_Standalone)
                07 [@label057] 82 7B 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 1F <%t ""> 16 18 [@] ( 84 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnitNativeBase.IsVisible.ReturnValue> 00 ( 1B <IsVisible> 16 ) 18 [@] ( 9B 38 3A 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.NetMode> 00 ( 01 <Engine.WorldInfo.NetMode> ) 38 3A 24 00 16 16 ) 16 ) 
                    //if(kAbility.m_kUnit.GetCharacter().HasUpgrade(54))
                    07 [@label050] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 36 16 ) 
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message((("<img src='" $ "Icon_OVERWATCH_HTML") $ "' align='baseline' vspace='-3'>") $ AbilitySentinelFlyover, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_SentinelFlyover');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 70 70 70 1F <%t "<img src='"> 1F <%t "Icon_OVERWATCH_HTML"> 16 1F <%t "' align='baseline' vspace='-3'>"> 16 01 <@AbilitySentinelFlyover> 16 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_SentinelFlyover> 16 ) 
                        //if(kBroadcastWorldMessage != none)
                        07 [@label049] 77 00 <.kBroadcastWorldMessage> 2A 16 
                            //XComUIBroadcastWorldMessage_SentinelFlyover(kBroadcastWorldMessage).Init_SentinelFlyover(kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                            19 2E <Class.XComUIBroadcastWorldMessage_SentinelFlyover> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_SentinelFlyover> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                        [#label049]
                    //else
                    06 [@label057] 
                        [#label050]
                        //if(kAbility.m_kUnit.GetCharacter().HasUpgrade(10))
                        07 [@label052] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 0A 16 ) 
                            //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message((("<img src='" $ "Icon_OVERWATCH_HTML") $ "' align='baseline' vspace='-3'>") $ XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(9), kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                            0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 70 70 70 1F <%t "<img src='"> 1F <%t "Icon_OVERWATCH_HTML"> 16 1F <%t "' align='baseline' vspace='-3'>"> 16 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 09 16 ) 16 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                            //if(kBroadcastWorldMessage != none)
                            07 [@label051] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(9, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                                19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 09 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                            [#label051]
                        //else
                        06 [@label057] 
                            [#label052]
                            //if(kAbility.m_kUnit.GetCharacter().HasUpgrade(132))
                            07 [@label054] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 84 16 ) 
                                //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message((("<img src='" $ "Icon_OVERWATCH_HTML") $ "' align='baseline' vspace='-3'>") $ XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(34), kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                                0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 70 70 70 1F <%t "<img src='"> 1F <%t "Icon_OVERWATCH_HTML"> 16 1F <%t "' align='baseline' vspace='-3'>"> 16 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 22 16 ) 16 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                                //if(kBroadcastWorldMessage != none)
                                07 [@label053] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                    //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(34, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                                    19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 22 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                                [#label053]
                            //else
                            06 [@label057] 
                                [#label054]
                                //if(kAbility.m_kUnit.GetCharacter().HasUpgrade(133))
                                07 [@label056] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 85 16 ) 
                                    //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message((("<img src='" $ "Icon_OVERWATCH_HTML") $ "' align='baseline' vspace='-3'>") $ XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(35), kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                                    0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 70 70 70 1F <%t "<img src='"> 1F <%t "Icon_OVERWATCH_HTML"> 16 1F <%t "' align='baseline' vspace='-3'>"> 16 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 23 16 ) 16 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                                    //if(kBroadcastWorldMessage != none)
                                    07 [@label055] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                        //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(35, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                                        19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 23 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                                    [#label055]
                                //else
                                06 [@label057] 
                                    [#label056]
                                    //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(kAbility.strTargetMessage, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor),,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_AbilityTargetMessage');
                                    0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 00 <.kAbility> [@] <XGAbility.strTargetMessage> 00 ( 01 <XGAbility.strTargetMessage> ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 16 ) 
                                    //if(kBroadcastWorldMessage != none)
                                    07 [@label057] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                        //XComUIBroadcastWorldMessage_AbilityTargetMessage(kBroadcastWorldMessage).Init_AbilityTargetMessage(kAbility, kTarget.GetLocation(), byte(kAbility.iTargetMsgColor), kTarget.m_eTeamVisibilityFlags);
                                        19 2E <Class.XComUIBroadcastWorldMessage_AbilityTargetMessage> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_AbilityTargetMessage> 00 <.kAbility> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 38 3D 19 00 <.kAbility> [@] <XGAbility.iTargetMsgColor> 00 ( 01 <XGAbility.iTargetMsgColor> ) 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                                    [#label057]
                //break;
                06 [@label075] 
            [#label058]
            //case 17:
            0A [@label060] 2C 11 
                //if(kAbility.GetPrimaryTarget() != none)
                07 [@label059] 77 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 2A 16 
                    //kAbility.GetPrimaryTarget().Reanimate();
                    19 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <NullRef> 00 ( 1B <Reanimate> 4A 16 ) 
                [#label059]
                //break;
                06 [@label075] 
            [#label060]
            //case 18:
            0A [@label062] 2C 12 
                //if(kAbility.GetPrimaryTarget() != none)
                07 [@label061] 77 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 2A 16 
                    //kAbility.GetPrimaryTarget().Reanimate(true);
                    19 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <NullRef> 00 ( 1B <Reanimate> 27 16 ) 
                [#label061]
                //break;
                06 [@label075] 
            [#label062]
            //case 19:
            0A [@label063] 2C 13 
                //kAbility.m_kUnit.PsiDrain(kAbility.GetPrimaryTarget());
                19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <NullRef> 00 ( 1B <PsiDrain> 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 16 ) 
                //break;
                06 [@label075] 
            [#label063]
            //case 20:
            0A [@label065] 2C 14 
                //if(kAbility.GetPrimaryTarget() != none)
                07 [@label064] 77 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 2A 16 
                    //kAbility.GetPrimaryTarget().Heal();
                    19 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <NullRef> 00 ( 1B <Heal> 16 ) 
                [#label064]
                //break;
                06 [@label075] 
            [#label065]
            //case 21:
            0A [@label068] 2C 15 
                //if(Role == ROLE_Authority)
                07 [@label067] 9A 38 3A 01 <Engine.Actor.Role> 38 3A 24 03 16 
                    //if((kTarget != none) && (kAbility.iType == 34) || kAbility.iType == 38)
                    07 [@label067] 82 77 00 <.kTarget> 2A 16 18 [@] ( 84 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 22 16 18 [@] ( 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 26 16 16 ) 16 ) 
                        //if(kTarget.GetCharType() == 21)
                        07 [@label066] 9A 19 00 <.kTarget> [@] <XGUnitNativeBase.GetCharType.ReturnValue> 00 ( 1B <GetCharType> 16 ) 2C 15 16 
                            //kTarget.m_bHadShieldThisTurn = true;
                            14 19 00 <.kTarget> [@] <XGUnit.m_bHadShieldThisTurn> 00 ( 2D 01 <XGUnit.m_bHadShieldThisTurn> ) 27 
                            //kTarget.SetShieldHP(kTarget.GetMaxShieldHP());
                            19 00 <.kTarget> [@] <NullRef> 00 ( 1B <SetShieldHP> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetMaxShieldHP.ReturnValue> 00 ( 1B <GetMaxShieldHP> 16 ) 16 ) 
                        //else
                        06 [@label067] 
                            [#label066]
							
                            //kTarget.m_iWillCheatBonus = kAbility.m_kUnit.GetWill();
                            0F 19 00 <.kTarget> [@] <XGUnit.m_iWillCheatBonus> 00 ( 01 <XGUnit.m_iWillCheatBonus> ) 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 4A 16 ) 
							
                            //kTarget.ApplyInventoryStatModifiers();
                            19 00 <.kTarget> [@] <NullRef> 00 ( 1B <ApplyInventoryStatModifiers> 16 ) 
                            //if(false)
                            07 [@label067] 28 
                            0B 
                            0B 
                            0B 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //iSet
                                00 <XComTacticalCheatManager.AIDebugWaveSystem.iSet> 
                                //kTarget.HealBy(1 + (kTarget.m_iWillCheatBonus / 25));
                                19 00 <.kTarget> [@] <XGUnit.HealBy.ReturnValue> 00 ( 1B <HealBy> 92 26 91 19 00 <.kTarget> [@] <XGUnit.m_iWillCheatBonus> 00 ( 01 <XGUnit.m_iWillCheatBonus> ) 2C 19 16 16 16 ) 
                            [#label067]
                //break;
                06 [@label075] 
            [#label068]
            //case 48:
            0A [@label073] 2C 30 
                //if(kTarget != none)
                07 [@label072] 77 00 <.kTarget> 2A 16 
                    //if(kTarget.CurePoison())
                    07 [@label072] 19 00 <.kTarget> [@] <XGUnit.CurePoison.ReturnValue> 00 ( 1B <CurePoison> 16 ) 
                        //if(WorldInfo.NetMode == NM_Standalone)
                        07 [@label070] 9A 38 3A 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.NetMode> 00 ( 01 <Engine.WorldInfo.NetMode> ) 38 3A 24 00 16 
                            //if(kTarget.IsVisible())
                            07 [@label069] 19 00 <.kTarget> [@] <XGUnitNativeBase.IsVisible.ReturnValue> 00 ( 1B <IsVisible> 16 ) 
                                //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(8), kTarget.GetLocation(), 3,,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                                19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 08 16 ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                            [#label069]
                        //else
                        06 [@label071] 
                            [#label070]
                            //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(8), kTarget.GetLocation(), 3,,, kTarget.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                            0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 08 16 ) 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 4A 4A 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                            //if(kBroadcastWorldMessage != none)
                            07 [@label071] 77 00 <.kBroadcastWorldMessage> 2A 16 
                                //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(8, kTarget.GetLocation(), 3, kTarget.m_eTeamVisibilityFlags);
                                19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 08 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 19 00 <.kTarget> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                            [#label071]
                        //if(WorldInfo.IsConsoleBuild(2) || WorldInfo.IsConsoleBuild(1))
                        07 [@label072] 84 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.IsConsoleBuild.ReturnValue> 00 ( 1C <Engine.WorldInfo.IsConsoleBuild> 24 02 16 ) 18 [@] ( 19 01 <Engine.Actor.WorldInfo> [@] <Engine.WorldInfo.IsConsoleBuild.ReturnValue> 00 ( 1C <Engine.WorldInfo.IsConsoleBuild> 24 01 16 ) 16 ) 
                            //++ XGBattle_SP(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle).m_iCurePoison;
                            A5 19 2E <Class.XGBattle_SP> 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle_SP.m_iCurePoison> 00 ( 01 <XGBattle_SP.m_iCurePoison> ) 16 
                            //if(XGBattle_SP(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle).m_iCurePoison == 5)
                            07 [@label072] 9A 19 2E <Class.XGBattle_SP> 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle_SP.m_iCurePoison> 00 ( 01 <XGBattle_SP.m_iCurePoison> ) 2C 05 16 
                                //XComOnlineEventMgr(GameEngine(class'Engine'.static.GetEngine()).OnlineEventManager).UnlockAchievement(27);
                                19 2E <Class.XComOnlineEventMgr> 19 2E <Engine.GameEngine> 12 20 <Engine.Engine> [@] <Engine.Engine.GetEngine.ReturnValue> 00 ( 1C <Engine.Engine.GetEngine> 16 ) [@] <Engine.GameEngine.OnlineEventManager> 00 ( 01 <Engine.GameEngine.OnlineEventManager> ) [@] <NullRef> 00 ( 1B <UnlockAchievement> 24 1B 16 ) 
                            [#label072]
                //break;
                06 [@label075] 
            [#label073]
            //case 50:
            0A [@label074] 2C 32 
                //kTarget.m_bJetbootModuleActive = true;
                14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bJetbootModuleActive> 00 ( 2D 01 <XGUnitNativeBase.m_bJetbootModuleActive> ) 27 
                //kTarget.GetPathingPawn().ComputePath2(kTarget.GetLocation(), true, true);
                19 19 00 <.kTarget> [@] <XGUnit.GetPathingPawn.ReturnValue> 00 ( 1B <GetPathingPawn> 16 ) [@] <XComPathingPawn.ComputePath2.ReturnValue> 00 ( 1B <ComputePath2> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 27 27 16 ) 
                //kTarget.m_bBuildAbilityDataDirty = true;
                14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bBuildAbilityDataDirty> 00 ( 2D 01 <XGUnitNativeBase.m_bBuildAbilityDataDirty> ) 27 
                //kTarget.BuildAbilities(true);
                19 00 <.kTarget> [@] <NullRef> 00 ( 1B <BuildAbilities> 27 16 ) 
                //break;
                06 [@label075] 
            [#label074]
            //default:
            0A FF FF 
                //break;
                06 [@label075] 
            [#label075]
    //++ iAbilityEffect;
    A5 00 <.iAbilityEffect> 16 
    //goto J0x0B; [Loop Continue]
    06 [@label001] 
[#label076]
//if((kAbility.GetType() == 27) || kAbility.GetType() == 70)
07 [@label078] 84 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 1B 16 18 [@] ( 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 46 16 16 ) 
    //kTarget.HunkerDown();
    19 00 <.kTarget> [@] <NullRef> 00 ( 1B <HunkerDown> 16 ) 
    //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
    07 [@label077] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
        //PlaySound(SoundCue(DynamicLoadObject("SoundUI.HunkerDownCue", class'SoundCue')), true);
        1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.HunkerDownCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
    [#label077]
//else
06 [@label081] 
    [#label078]
    //if(kAbility.GetType() == 22)
    07 [@label081] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 16 16 
        //kTarget.Overwatch();
        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <Overwatch> 16 ) 
        //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
        07 [@label081] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
            //if((XComTacticalCheatManager(GetALocalPlayerController().CheatManager) != none) && XComTacticalCheatManager(GetALocalPlayerController().CheatManager).iTestHideableActors > 1)
            07 [@label080] 82 77 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) 2A 16 18 [@] ( 97 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.iTestHideableActors> 00 ( 01 <XComTacticalCheatManager.iTestHideableActors> ) 26 16 16 ) 
                //if(XComTacticalCheatManager(GetALocalPlayerController().CheatManager).iTestHideableActors > 2)
                07 [@label079] 97 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.iTestHideableActors> 00 ( 01 <XComTacticalCheatManager.iTestHideableActors> ) 2C 02 16 
                    //PlaySound(SoundCue(DynamicLoadObject("SoundUI.OverwatchCue", class'SoundCue')), true);
                    1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.OverwatchCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
                    //-- XComTacticalCheatManager(GetALocalPlayerController().CheatManager).iTestHideableActors;
                    A6 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.iTestHideableActors> 00 ( 01 <XComTacticalCheatManager.iTestHideableActors> ) 16 
                [#label079]
            //else
            06 [@label081] 
                [#label080]
                //PlaySound(SoundCue(DynamicLoadObject("SoundUI.OverwatchCue", class'SoundCue')), true);
                1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.OverwatchCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
            [#label081]
//if(kAbility.m_kUnit.GetPawn().CanApplyTracerBeams(kAbility, kAbility.m_kUnit, kTarget))
07 [@label082] 19 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnitNativeBase.GetPawn.ReturnValue> 00 ( 1B <GetPawn> 16 ) [@] <XComUnitPawn.CanApplyTracerBeams.ReturnValue> 00 ( 1B <CanApplyTracerBeams> 00 <.kAbility> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 00 <.kTarget> 16 ) 
    //kTarget.GetPawn().ApplyTracerBeams(kAbility.m_kUnit, kTarget, kAbility);
    19 19 00 <.kTarget> [@] <XGUnitNativeBase.GetPawn.ReturnValue> 00 ( 1B <GetPawn> 16 ) [@] <NullRef> 00 ( 1B <ApplyTracerBeams> 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) 00 <.kTarget> 00 <.kAbility> 16 ) 
[#label082]
//if(kAbility.GetType() == 20)
07 [@label083] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 14 16 
    //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
    07 [@label083] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
        //PlaySound(SoundCue(DynamicLoadObject("SoundUI.OverwatchCue", class'SoundCue')), true);
        1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.OverwatchCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
    [#label083]
//if(kAbility.GetType() == 41)
07 [@label084] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 29 16 
    //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
    07 [@label084] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
        //PlaySound(SoundCue(DynamicLoadObject("SoundUI.ActivateAbilityCue", class'SoundCue')), true);
        1C <Engine.Actor.PlaySound> 2E <Engine.SoundCue> 1C <Core.Object.DynamicLoadObject> 1F <%t "SoundUI.ActivateAbilityCue"> 20 <Engine.SoundCue> 4A 16 27 4A 4A 4A 4A 16 
        //kTarget.m_bBuildAbilityDataDirty = true;
        14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bBuildAbilityDataDirty> 00 ( 2D 01 <XGUnitNativeBase.m_bBuildAbilityDataDirty> ) 27 
        //kTarget.BuildAbilities(true);
        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <BuildAbilities> 27 16 ) 
    [#label084]
//if(kAbility.GetType() == 51)
07 [@label085] 9A 19 00 <.kAbility> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 2C 33 16 
    //if(kTarget.IsMine() || kTarget.IsVisibleToTeam(GetALocalPlayerController().m_eTeam))
    07 [@label085] 84 19 00 <.kTarget> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 00 <.kTarget> [@] <Engine.Actor.IsVisibleToTeam.ReturnValue> 00 ( 1B <IsVisibleToTeam> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.Actor.m_eTeam> 00 ( 01 <Engine.Actor.m_eTeam> ) 16 ) 16 ) 
        //PlaySound(soundcue'ChatReceive_Cue', true);
        1C <Engine.Actor.PlaySound> 20 <SoundMultiplayer.ChatReceive_Cue> 27 4A 4A 4A 4A 16 
        //kTarget.m_bBuildAbilityDataDirty = true;
        14 19 00 <.kTarget> [@] <XGUnitNativeBase.m_bBuildAbilityDataDirty> 00 ( 2D 01 <XGUnitNativeBase.m_bBuildAbilityDataDirty> ) 27 
        //kTarget.BuildAbilities(true);
        19 00 <.kTarget> [@] <NullRef> 00 ( 1B <BuildAbilities> 27 16 ) 
        //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).m_kTacticalHUD.Update();
        19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.m_kTacticalHUD> 00 ( 01 <XComPresentationLayer.m_kTacticalHUD> ) [@] <NullRef> 00 ( 1B <Update> 16 ) 
    [#label085]
//return;
04 0B 
53 


OBJECT = XGUnit.PassesWillTest : AUTO

[REPLACEMENT_CODE]
0B
//iEvenStatsChanceToFail = 50;
49 [@] ( 2C 32 15 ) 
//XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = 0;
0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 2C 00 


07 [@IfPsi] 2D 00 <.bThisIsPanic> 
	//iMyMods += (RecordMoraleLoss(1));
	A1 00 <.iMyMods> 1B <RecordMoraleLoss> 2C 01 16 16
06 [@ElsePsi]
	[#IfPsi]
	//iMyMods += (RecordMoraleLoss(3));
	A1 00 <.iMyMods> 1B <RecordMoraleLoss> 45 77 00 <.kVersus> 2A 16 [@] ( 9E 2C 03 2C <!OffensiveCombatStim> 16 ) [@] ( 2C 03 ) 16 16
[#ElsePsi]

//if(kVersus != none)
07 [@IfVersus] 77 00 <.kVersus> 2A 16
	//iMyMods -= kVersus.RecordMoraleLoss(3);
	A2 00 <.iMyMods> 19 00 <.kVersus> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 03 2C <!DefensiveCombatStim> 16 16 ) 16
[#IfVersus]

//iChance = WillTestChance(iWillTest, iMyMods, false, false, kVersus, iEvenStatsChanceToFail, iRoll);
0F 00 <.iChance> 1B <WillTestChance> 00 <.iWillTest> 00 <.iMyMods> 28 28 00 <.kVersus> 00 <.iEvenStatsChanceToFail> 00 <.iRoll> 16 
//XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_iDifficulty;
0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.m_iDifficulty> 00 ( 01 <XGTacticalGameCore.m_iDifficulty> ) 
//if(iChance == 100)
07 [@label001] 9A 00 <.iChance> 2C 64 16 
	14 2D 00 <.bPasses> 27 
06 [@label002] 
	[#label001]
	07 [@label003] 9A 00 <.iChance> 25 16 
		14 2D 00 <.bPasses> 28 
	06 [@label002] 
		[#label003]
		0F 00 <.iRoll> 12 20 <Class.XComEngine> [@] <XComEngine.SyncRand.ReturnValue> 00 ( 1C <XComEngine.SyncRand> 2C 64 A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 ) 
		14 2D 00 <.bPasses> 98 00 <.iRoll> 00 <.iChance> 16 
[#label002]
07 [@label004] 2D 00 <.bThisIsPanic> 
	0F 01 <@m_bCantBeHurt> 9E 9E 01 <@m_bCantBeHurt> 94 92 00 <.iRoll> 26 16 2C 10 16 16 94 00 <.iChance> 2C 08 16 16 
	1B <DebugTreads> 16 
[#label004]
04 2D 00 <.bPasses> 
04 3A <.ReturnValue> 
53  

OBJECT=XGUnit.PerformPanicTest:AUTO

[REPLACEMENT_CODE]
0B 
//bUsingPsiPanicAbility = false;
49 [@] ( 28 15 ) 
//iMoraleEvent = -1;
49 [@] ( 1D <%i -1> 15 ) 
//if(GetCharacter().HasUpgrade(28))
07 [@label001] 19 1B <GetCharacter> 16 [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1C 16 ) 
    //return false;
    04 28 
[#label001]
//if(((((CanPanic(bUsingPsiPanicAbility)) && !IsPanicActive(bUsingPsiPanicAbility)) && !IsPanicked()) && !IsStrangled()) && !IsStrangling())
07 [@label008] 82 82 82 82 1B <CanPanic> 2D 00 <.bUsingPsiPanicAbility> 16 18 [@] ( 81 1B <IsPanicActive> 2D 00 <.bUsingPsiPanicAbility> 16 16 16 ) 18 [@] ( 81 1B <IsPanicked> 16 16 16 ) 18 [@] ( 81 1B <IsStrangled> 16 16 16 ) 18 [@] ( 81 1B <IsStrangling> 16 16 16 ) 
    //if((GetAppliedAbility(31)) != none)
    07 [@label002] 77 1B <GetAppliedAbility> 2C 1F 16 2A 16 
        //iWillMods += 40;
        A1 00 <.iWillMods> 2C 28 16 
    [#label002]
	
	//if(bUsingPsiPanicAbility && iMoraleEvent == -1)
    07 [@IfPanicAttack] 82 2D 00 <.bUsingPsiPanicAbility> 18 [@] ( 9A 00 <.iMoraleEvent> 1D <%i -1> 16 16 )
        //iWillMods -= class'XGTacticalGameCore'.default.EXALT_LOOT3;
        A2 00 <.iWillMods> 12 20 <Class.XGTacticalGameCore> [@] <XGTacticalGameCoreNativeBase.EXALT_LOOT3> 00 ( 02 <XGTacticalGameCoreNativeBase.EXALT_LOOT3> ) 16 
    [#IfPanicAttack]
	
    //bPassedWillTest = PassesWillTest(iEventWill, iWillMods, !bUsingPsiPanicAbility, none, ((bUsingPsiPanicAbility) ? 50 : 30));
    14 2D 00 <.bPassedWillTest> 1B <PassesWillTest> 00 <.iEventWill> 00 <.iWillMods> 81 2D 00 <.bUsingPsiPanicAbility> 16 2A 45 2D 00 <.bUsingPsiPanicAbility> [@] ( 2C 32 ) [@] ( 2C 1E ) 16 
    //switch(iMoraleEvent)
    05 <.iMoraleEvent> 00 00 <.iMoraleEvent> 
        //case 100:
        0A [@label004] 2C 64 
            //bPanic = true;
            14 2D 00 <.bPanic> 27 
            //iPanicTurns = 1 + class'XComEngine'.static.SyncRand(0, (string(Name) @ string(GetStateName())) @ string(GetFuncName()));
            0F 00 <.iPanicTurns> 92 2C 01 12 20 <Class.XComEngine> [@] <XComEngine.SyncRand.ReturnValue> 00 ( 1C <XComEngine.SyncRand> 2C 00 A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 ) 16 
            //if(!bPassedWillTest && (XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kActivePlayer != (GetPlayer())) || (GetMoves()) != m_kCharacter.m_iMaxMoves)
            07 [@label003] 82 81 2D 00 <.bPassedWillTest> 16 18 [@] ( 84 77 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kActivePlayer> 00 ( 01 <XGBattle.m_kActivePlayer> ) 1B <GetPlayer> 16 16 18 [@] ( 9B 1B <GetMoves> 16 19 01 <XGUnitNativeBase.m_kCharacter> [@] <XGCharacter.m_iMaxMoves> 00 ( 01 <XGCharacter.m_iMaxMoves> ) 16 16 ) 16 ) 
                //++ iPanicTurns;
                A5 00 <.iPanicTurns> 16 
            [#label003]
            //break;
            06 [@label005] 
        [#label004]
        //default:
        0A FF FF 
            //bPanic = !bPassedWillTest;
            14 2D 00 <.bPanic> 81 2D 00 <.bPassedWillTest> 16 
            //break;
            06 [@label005] 
        [#label005]
    //if(bPanic)
    07 [@label007] 2D 00 <.bPanic> 
        //iPanicTurns = 1;
        0F 00 <.iPanicTurns> 2C 01 
        //if(bUsingPsiPanicAbility)
        07 [@label006] 2D 00 <.bUsingPsiPanicAbility> 
			
			A2 00 <.iEventWill> 45 9A 00 <.iMoraleEvent> 1D <%i -1> 16 [@] ( 00 <.iWillMods> ) [@] ( 2C 00 ) 16

			A1 00 <.iPanicTurns> 90 2C 01 91 00 <.iEventWill> 2C 32 16 16 16 
		
			0F 00 <.iWillMods> 12 20 <Class.XComEngine> [@] <XComEngine.SyncRand.ReturnValue> 00 ( 1C <XComEngine.SyncRand> 2C 32 A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 )

			07 [@label006] 96 00 <.iWillMods> FD 00 <.iEventWill> 2C 32 16 16 
				
				//iPanicTurns += 2;
                A1 00 <.iPanicTurns> 2C 01 16 
				
            [#label006]
        //iPanicTurns += class'XComEngine'.static.SyncRand(0, (string(Name) @ string(GetStateName())) @ string(GetFuncName()));
        A1 00 <.iPanicTurns> 12 20 <Class.XComEngine> [@] <XComEngine.SyncRand.ReturnValue> 00 ( 1C <XComEngine.SyncRand> 2C 00 A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 ) 16 		
        //if((XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kActivePlayer != (GetPlayer())) || (GetMoves()) != m_kCharacter.m_iMaxMoves)
        07 [@label007] 84 77 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kActivePlayer> 00 ( 01 <XGBattle.m_kActivePlayer> ) 1B <GetPlayer> 16 16 18 [@] ( 9B 1B <GetMoves> 16 19 01 <XGUnitNativeBase.m_kCharacter> [@] <XGCharacter.m_iMaxMoves> 00 ( 01 <XGCharacter.m_iMaxMoves> ) 16 16 ) 
            //++ iPanicTurns;
            A5 00 <.iPanicTurns> 16 
        [#label007]
		
		//E7 70 1F <%t "Test! PerformPanicTest: PanicTurns = "> 38 53 00 <.iPanicTurns> 16 2A 16
		
    //if(bPanic)
    07 [@label008] 2D 00 <.bPanic> 
        //Panic(iPanicTurns, bUsingPsiPanicAbility);
        1B <Panic> 00 <.iPanicTurns> 2D 00 <.bUsingPsiPanicAbility> 16 
    [#label008]
//return bPanic;
04 2D 00 <.bPanic> 
//return ReturnValue;
04 3A <.ReturnValue> 
53 


OBJECT=XGUnit.ApplyNeuralFeedback:AUTO

[REPLACEMENT_CODE]
//kTarget[0] = kAbility.GetPrimaryTarget();
0F 1A 25 00 <.kTarget> 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 
//kTarget[2] = none;
0F 1A 2C 02 00 <.kTarget> 2A 
//if(!kTarget[0].GetCharacter().HasUpgrade(29))
07 [@label005] 81 19 19 1A 25 00 <.kTarget> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1D 16 ) 16 
    //I = 0;
    0F 00 <.I> 25 
[#label001]
    //if(I < kTarget[0].m_arrVisibleFriends.Length) [Loop If]
    07 [@label003] 96 00 <.I> 36 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_arrVisibleFriends> 00 ( 01 <XGUnitNativeBase.m_arrVisibleFriends> ) 16 
        //kTarget[1] = kTarget[0].m_arrVisibleFriends[I];
        0F 1A 26 00 <.kTarget> 10 00 <.I> 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_arrVisibleFriends> 00 ( 01 <XGUnitNativeBase.m_arrVisibleFriends> ) 
        //if((((((kTarget[1].IsAliveAndWell() && !kTarget[1].IsPanicking()) && !kTarget[1].IsPanicked()) && !kTarget[1].IsStrangled()) && !kTarget[1].IsHunkeredDown()) && !kTarget[1].m_bNeuralDampingStun) && !kTarget[1].m_bStunned)
        07 [@label002] 82 82 82 82 82 82 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.IsAliveAndWell.ReturnValue> 00 ( 1B <IsAliveAndWell> 4A 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.IsPanicking.ReturnValue> 00 ( 1B <IsPanicking> 16 ) 16 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.IsPanicked.ReturnValue> 00 ( 1B <IsPanicked> 16 ) 16 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnit.IsStrangled.ReturnValue> 00 ( 1B <IsStrangled> 16 ) 16 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnit.IsHunkeredDown.ReturnValue> 00 ( 1B <IsHunkeredDown> 16 ) 16 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.m_bNeuralDampingStun> 00 ( 2D 01 <XGUnitNativeBase.m_bNeuralDampingStun> ) 16 16 ) 18 [@] ( 81 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.m_bStunned> 00 ( 2D 01 <XGUnitNativeBase.m_bStunned> ) 16 16 ) 
            //if(kTarget[1].GetCharacter().HasUpgrade(29))
            07 [@label002] 19 19 1A 26 00 <.kTarget> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1D 16 ) 
                //if(VSize(kTarget[1].GetLocation() - kTarget[0].GetLocation()) < float(8 * 96))
                07 [@label002] 96 E1 D8 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 16 16 38 3F 90 2C 08 2C 60 16 16 
                    
					//if(kTarget[1].PassesWillTest(GetWill(), 0, false, self))
                    07 [@label002] 19 1A 26 00 <.kTarget> [@] <XGUnit.PassesWillTest.ReturnValue> 00 ( 1B <PassesWillTest> 1B <RecordMoraleLoss> 4A 16 2C 00 28 17 4A 16 ) 
                        //if((kTarget[2] == none) || kTarget[1].m_aCurrentStats[7] > kTarget[2].m_aCurrentStats[7])
                        07 [@label002] 84 72 1A 2C 02 00 <.kTarget> 2A 16 18 [@] ( 97 1A 2C 07 19 1A 26 00 <.kTarget> [@] <XGUnitNativeBase.m_aCurrentStats> 00 ( 01 <XGUnitNativeBase.m_aCurrentStats> ) 1A 2C 07 19 1A 2C 02 00 <.kTarget> [@] <XGUnitNativeBase.m_aCurrentStats> 00 ( 01 <XGUnitNativeBase.m_aCurrentStats> ) 16 16 ) 
                            
							//kTarget[2] = kTarget[1];
                            0F 1A 2C 02 00 <.kTarget> 1A 26 00 <.kTarget> 
                        [#label002]
        //++ I;
        A3 00 <.I> 16 
        //goto J0x82; [Loop Continue]
        06 [@label001] 
    [#label003]
    //if(kTarget[2] == none)
    07 [@label004] 72 1A 2C 02 00 <.kTarget> 2A 16 
        //return;
        04 0B 
    [#label004]
//else
06 [@label006] 
    [#label005]
    //kTarget[2] = kTarget[0];
    0F 1A 2C 02 00 <.kTarget> 1A 25 00 <.kTarget> 
[#label006]
//kTarget[0] = kTarget[2];
0F 1A 25 00 <.kTarget> 1A 2C 02 00 <.kTarget> 
//if(!(((((kTarget[0].IsAliveAndWell() && !kTarget[0].IsPanicking()) && !kTarget[0].IsPanicked()) && !kTarget[0].IsStrangled()) && !kTarget[0].IsHunkeredDown()) && !kTarget[0].m_bNeuralDampingStun) && !kTarget[0].m_bStunned)
07 [@label007] 81 82 82 82 82 82 82 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.IsAliveAndWell.ReturnValue> 00 ( 1B <IsAliveAndWell> 4A 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.IsPanicking.ReturnValue> 00 ( 1B <IsPanicking> 16 ) 16 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.IsPanicked.ReturnValue> 00 ( 1B <IsPanicked> 16 ) 16 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnit.IsStrangled.ReturnValue> 00 ( 1B <IsStrangled> 16 ) 16 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnit.IsHunkeredDown.ReturnValue> 00 ( 1B <IsHunkeredDown> 16 ) 16 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_bNeuralDampingStun> 00 ( 2D 01 <XGUnitNativeBase.m_bNeuralDampingStun> ) 16 16 ) 18 [@] ( 81 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_bStunned> 00 ( 2D 01 <XGUnitNativeBase.m_bStunned> ) 16 16 ) 16 
    //return;
    04 0B 
[#label007]
//if(kTarget[0].m_bSuppressing)
07 [@label008] 19 1A 25 00 <.kTarget> [@] <@m_bSuppressing> 00 ( 2D 01 <@m_bSuppressing> ) 
    //kTarget[0].DebugVisibilityForSelf(true);
    19 1A 25 00 <.kTarget> [@] <NullRef> 00 ( 1B <DebugVisibilityForSelf> 27 4A 16 ) 
[#label008]
//kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(17), GetLocation(), 3,,, m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 11 16 ) 1B <GetLocation> 16 24 03 4A 4A 01 <Engine.Actor.m_eTeamVisibilityFlags> 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
//if(kBroadcastWorldMessage != none)
07 [@label009] 77 00 <.kBroadcastWorldMessage> 2A 16 
    //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(17, GetLocation(), 3, m_eTeamVisibilityFlags);
    19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 11 1B <GetLocation> 16 24 03 01 <Engine.Actor.m_eTeamVisibilityFlags> 16 ) 
[#label009]
//I = 0;
0F 00 <.I> 25 
[#label010]
//if(I < m_iNumAbilities) [Loop If]
07 [@label014] 96 00 <.I> 01 <XGUnitNativeBase.m_iNumAbilities> 16 
    //if(m_aAbilities[I].iType == kAbility.iType)
    07 [@label011] 9A 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 16 
    //else
    06 [@label013] 
        [#label011]
        //if((m_aAbilities[I].HasProperty(2) && m_aAbilities[I].HasProperty(45)) && XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_kAbilities.GetTAbility(m_aAbilities[I].iType).iCooldown != -1)
        07 [@label013] 82 82 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.HasProperty.ReturnValue> 00 ( 1B <HasProperty> 24 02 16 ) 18 [@] ( 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.HasProperty.ReturnValue> 00 ( 1B <HasProperty> 24 2D 16 ) 16 ) 18 [@] ( 9B 35 <XGTacticalGameCoreNativeBase.TAbility.iCooldown> <XGTacticalGameCoreNativeBase.TAbility> 01 00 19 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.m_kAbilities> 00 ( 01 <XGTacticalGameCoreNativeBase.m_kAbilities> ) [@] <XGAbilityTree.GetTAbility.ReturnValue> 00 ( 1B <GetTAbility> 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 16 ) 1D <%i -1> 16 16 ) 
            //if(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_kAbilities.IsAbilityCoolingDown(self, m_aAbilities[I].iType))
            07 [@label012] 19 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.m_kAbilities> 00 ( 01 <XGTacticalGameCoreNativeBase.m_kAbilities> ) [@] <XGAbilityTree.IsAbilityCoolingDown.ReturnValue> 00 ( 1B <IsAbilityCoolingDown> 17 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 16 ) 
            //else
            06 [@label013] 
                [#label012]
                //m_aAbilities[I].iCooldown = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_kAbilities.GetTAbility(m_aAbilities[I].iType).iCooldown;
                0F 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iCooldown> 00 ( 01 <XGAbility.iCooldown> ) 35 <XGTacticalGameCoreNativeBase.TAbility.iCooldown> <XGTacticalGameCoreNativeBase.TAbility> 01 00 19 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.m_kAbilities> 00 ( 01 <XGTacticalGameCoreNativeBase.m_kAbilities> ) [@] <XGAbilityTree.GetTAbility.ReturnValue> 00 ( 1B <GetTAbility> 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 16 ) 
                //m_aAbilitiesOnCooldown[m_iNumAbilitiesOnCooldown].iType = m_aAbilities[I].iType;
                0F 35 <XGUnitNativeBase.AbilityCooldown.iType> <XGUnitNativeBase.AbilityCooldown> 00 01 1A 01 <XGUnitNativeBase.m_iNumAbilitiesOnCooldown> 01 <XGUnitNativeBase.m_aAbilitiesOnCooldown> 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 
                //m_aAbilitiesOnCooldown[m_iNumAbilitiesOnCooldown].iCooldown = m_aAbilities[I].iCooldown;
                0F 35 <XGUnitNativeBase.AbilityCooldown.iCooldown> <XGUnitNativeBase.AbilityCooldown> 00 01 1A 01 <XGUnitNativeBase.m_iNumAbilitiesOnCooldown> 01 <XGUnitNativeBase.m_aAbilitiesOnCooldown> 19 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> [@] <XGAbility.iCooldown> 00 ( 01 <XGAbility.iCooldown> ) 
                //++ m_iNumAbilitiesOnCooldown;
                A5 01 <XGUnitNativeBase.m_iNumAbilitiesOnCooldown> 16 
                //XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_kAbilities.RemoveAbilityFromBuiltAbilitiesList(m_aAbilities[I]);
                19 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.m_kAbilities> 00 ( 01 <XGTacticalGameCoreNativeBase.m_kAbilities> ) [@] <NullRef> 00 ( 1B <RemoveAbilityFromBuiltAbilitiesList> 1A 00 <.I> 01 <XGUnitNativeBase.m_aAbilities> 16 ) 
            [#label013]
    //++ I;
    A3 00 <.I> 16 
    //goto J0x64D; [Loop Continue]
    06 [@label010] 
[#label014]
//kTarget[0].m_bApplyingNeuralFeedback = true;
14 19 1A 25 00 <.kTarget> [@] <@m_bApplyingNeuralFeedback> 00 ( 2D 01 <@m_bApplyingNeuralFeedback> ) 27 

//iDmg = Max((int(float(kTarget[0].RecordMoraleLoss(2)) * 1.30) - (RecordMoraleLoss())) / 10, 1);
0F 00 <.iDmg> FA 91 93 38 44 AB 38 3F 19 1A 25 00 <.kTarget> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 02 2C <!DefensiveCombatStim> 16 16 ) 1E <%f 1.3> 16 1B <RecordMoraleLoss> 9E 2C 00 2C <!OffensiveCombatStim> 16 16 16 2C 0A 16 26 16 

//E7 70 1F <%t "Test! ApplyNeuralFeedback: Dmg = "> 38 53 00 <.iDmg> 16 2A 16

//kTarget[0].m_iNeuralFeedbackDamage = iDmg;
0F 19 1A 25 00 <.kTarget> [@] <@m_iNeuralFeedbackDamage> 00 ( 01 <@m_iNeuralFeedbackDamage> ) 00 <.iDmg> 
//kTarget[0].m_kNeuralFeedbackTarget = self;
0F 19 1A 25 00 <.kTarget> [@] <@m_kNeuralFeedbackTarget> 00 ( 01 <@m_kNeuralFeedbackTarget> ) 17 
//kTarget[0].m_bHitNeuralFeedbackTarget = false;
14 19 1A 25 00 <.kTarget> [@] <@m_bHitNeuralFeedbackTarget> 00 ( 2D 01 <@m_bHitNeuralFeedbackTarget> ) 28 
//kTarget[0].m_kReplicateActivatePerkData.m_kNeuralFeedbackTarget = kTarget[0].m_kNeuralFeedbackTarget;
0F 35 <XGUnit.ReplicateActivatePerkData.m_kNeuralFeedbackTarget> <@ReplicateActivatePerkData> 00 01 19 1A 25 00 <.kTarget> [@] <@m_kReplicateActivatePerkData> 00 ( 01 <@m_kReplicateActivatePerkData> ) 19 1A 25 00 <.kTarget> [@] <@m_kNeuralFeedbackTarget> 00 ( 01 <@m_kNeuralFeedbackTarget> ) 
//kTarget[0].m_kReplicateActivatePerkData.m_iNeuralFeedbackDamage = kTarget[0].m_iNeuralFeedbackDamage;
0F 35 <XGUnit.ReplicateActivatePerkData.m_iNeuralFeedbackDamage> <@ReplicateActivatePerkData> 00 01 19 1A 25 00 <.kTarget> [@] <@m_kReplicateActivatePerkData> 00 ( 01 <@m_kReplicateActivatePerkData> ) 19 1A 25 00 <.kTarget> [@] <@m_iNeuralFeedbackDamage> 00 ( 01 <@m_iNeuralFeedbackDamage> ) 
//if(!kTarget[0].ActivatePerk(29, self,, true))
07 [@label015] 81 19 1A 25 00 <.kTarget> [@] <XGUnit.ActivatePerk.ReturnValue> 00 ( 1B <ActivatePerk> 24 1D 17 4A 27 4A 16 ) 16 
    //GetPawn().TakeDirectDamage(class'XComDamageType'.static.CreateEvent(iDmg, none, vect(0.0, 0.0, 0.0), vect(0.0, 0.0, 0.0), class'XComDamageType_Psionic'));
    19 1B <GetPawn> 16 [@] <NullRef> 00 ( 1B <TakeDirectDamage> 12 20 <Class.XComDamageType> [@] <XComDamageType.CreateEvent.ReturnValue> 00 ( 1B <CreateEvent> 00 <.iDmg> 2A 23 <%f 0> <%f 0> <%f 0> 23 <%f 0> <%f 0> <%f 0> 20 <Class.XComDamageType_Psionic> 4A 4A 16 ) 16 ) 
    //XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kCameraManager.RemoveDyingUnit(kTarget[0]);
    19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kCameraManager> 00 ( 01 <XComGameReplicationInfo.m_kCameraManager> ) [@] <NullRef> 00 ( 1B <RemoveDyingUnit> 1A 25 00 <.kTarget> 4A 16 ) 
[#label015]
//if(XGCharacter_Soldier(kTarget[0].m_kCharacter) != none)
07 [@label016] 77 2E <Class.XGCharacter_Soldier> 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_kCharacter> 00 ( 01 <XGUnitNativeBase.m_kCharacter> ) 2A 16 
    //XGCharacter_Soldier(kTarget[0].m_kCharacter).AddPsiXP(0);
    19 2E <Class.XGCharacter_Soldier> 19 1A 25 00 <.kTarget> [@] <XGUnitNativeBase.m_kCharacter> 00 ( 01 <XGUnitNativeBase.m_kCharacter> ) [@] <NullRef> 00 ( 1B <AddPsiXP> 2C 00 16 ) 
[#label016]
//return;
04 0B 
53 



OBJECT=XGAbility_Targeted.RollForHit:AUTO

[REPLACEMENT_CODE]
//kTag = XGParamTag(XComEngine(class'Engine'.static.GetEngine()).LocalizeContext.FindTag("XGParam"));
0F 00 <.kTag> 2E <Class.XGParamTag> 19 19 2E <Class.XComEngine> 12 20 <Engine.Engine> [@] <Engine.Engine.GetEngine.ReturnValue> 00 ( 1C <Engine.Engine.GetEngine> 16 ) [@] <XComEngine.LocalizeContext> 00 ( 01 <XComEngine.LocalizeContext> ) [@] <XGLocalizeContext.FindTag.ReturnValue> 00 ( 1B <FindTag> 1F <%t "XGParam"> 16 ) 
//m_bHit = false;
14 2D 01 <@m_bHit> 28 
//if((kFireAction != none) && IsRocketShot())
07 [@label001] 82 77 00 <.kFireAction> 2A 16 18 [@] ( 1B <IsRocketShot> 16 16 ) 
    //kFireAction.m_kTargetedEnemy = none;
    0F 19 00 <.kFireAction> [@] <XGAction_Fire.m_kTargetedEnemy> 00 ( 01 <XGAction_Fire.m_kTargetedEnemy> ) 2A 
[#label001]
//if(((kFireAction != none) && kFireAction.m_kTargetedEnemy == none) || (HasProperty(34)) && !HasEffect(1))
07 [@label008] 84 82 77 00 <.kFireAction> 2A 16 18 [@] ( 72 19 00 <.kFireAction> [@] <XGAction_Fire.m_kTargetedEnemy> 00 ( 01 <XGAction_Fire.m_kTargetedEnemy> ) 2A 16 16 ) 18 [@] ( 82 1B <HasProperty> 24 22 16 18 [@] ( 81 1B <HasEffect> 24 01 16 16 16 ) 16 ) 
    //if(HasProperty(46))
    07 [@label006] 1B <HasProperty> 24 2E 16 
        //vDest = ((kFireAction.m_bShotIsBlocked) ? kFireAction.m_vHitLocation : kFireAction.GetTargetLoc());
        0F 00 <.vDest> 45 19 00 <.kFireAction> [@] <XGAction_Fire.m_bShotIsBlocked> 00 ( 2D 01 <XGAction_Fire.m_bShotIsBlocked> ) [@] ( 19 00 <.kFireAction> [@] <XGAction_Fire.m_vHitLocation> 00 ( 01 <XGAction_Fire.m_vHitLocation> ) ) [@] ( 19 00 <.kFireAction> [@] <XGAction_Fire.GetTargetLoc.ReturnValue> 00 ( 1B <GetTargetLoc> 16 ) ) 
        //m_vTargetLocation = vDest;
        0F 01 <@m_vTargetLocation> 00 <.vDest> 
        //VDir = vDest - m_kUnit.GetLocation();
        0F 00 <.VDir> D8 00 <.vDest> 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 16 
        //if(m_kUnit.isHuman())
        07 [@label005] 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.isHuman.ReturnValue> 00 ( 1B <isHuman> 16 ) 
            //m_fDistanceToTarget = VSize(VDir);
            0F 01 <@m_fDistanceToTarget> E1 00 <.VDir> 16 
            //fDist = class'XComEngine'.static.SyncFRand((string(Name) @ string(GetStateName())) @ string(GetFuncName()));
            0F 00 <.fDist> 12 20 <Class.XComEngine> [@] <XComEngine.SyncFRand.ReturnValue> 00 ( 1C <XComEngine.SyncFRand> A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 ) 
            //fScatter = class'XComEngine'.static.SyncFRand((string(Name) @ string(GetStateName())) @ string(GetFuncName()));
            0F 00 <.fScatter> 12 20 <Class.XComEngine> [@] <XComEngine.SyncFRand.ReturnValue> 00 ( 1C <XComEngine.SyncFRand> A8 A8 38 57 01 <Core.Object.Name> 38 57 61 1C 16 16 38 57 1C <Core.Object.GetFuncName> 16 16 16 ) 
            //fRoll = Sqrt(Abs(float(2) * Loge(fDist))) * Cos(6.2831850 * fScatter);
            0F 00 <.fRoll> AB C1 BA AB 38 3F 2C 02 C0 00 <.fDist> 16 16 16 16 BC AB 1E <%f 6.2831850> 00 <.fScatter> 16 16 16 
            //fChance = Sqrt(Abs(float(2) * Loge(fDist))) * Sin(6.2831850 * fScatter);
            0F 00 <.fChance> AB C1 BA AB 38 3F 2C 02 C0 00 <.fDist> 16 16 16 16 BB AB 1E <%f 6.2831850> 00 <.fScatter> 16 16 16 
            //fScatter = class'XGTacticalGameCore'.default.MIN_SCATTER * (float(120 - Clamp((m_kUnit.GetOffense() + ((m_kUnit.m_kCharacter.HasUpgrade(141) && m_kUnit.m_iMovesActionsPerformed == 0) ? 10 : 0)) + ((m_kUnit.m_kCharacter.HasUpgrade(114) && m_kUnit.m_iMovesActionsPerformed == 0) ? 10 : 0), 0, 120)) / float(120));
            0F 00 <.fScatter> AB 12 20 <Class.XGTacticalGameCore> [@] <XGTacticalGameCoreNativeBase.MIN_SCATTER> 00 ( 02 <XGTacticalGameCoreNativeBase.MIN_SCATTER> ) AC 38 3F 93 2C 78 FB 92 92 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetOffense.ReturnValue> 00 ( 1B <GetOffense> 16 ) 45 82 19 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_kCharacter> 00 ( 01 <XGUnitNativeBase.m_kCharacter> ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 8D 16 ) 18 [@] ( 9A 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_iMovesActionsPerformed> 00 ( 01 <XGUnitNativeBase.m_iMovesActionsPerformed> ) 25 16 16 ) [@] ( 2C 0A ) [@] ( 25 ) 16 45 82 19 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_kCharacter> 00 ( 01 <XGUnitNativeBase.m_kCharacter> ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 72 16 ) 18 [@] ( 9A 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_iMovesActionsPerformed> 00 ( 01 <XGUnitNativeBase.m_iMovesActionsPerformed> ) 25 16 16 ) [@] ( 2C 0A ) [@] ( 25 ) 16 25 2C 78 16 16 38 3F 2C 78 16 16 
            //if(m_kUnit.m_iMovesActionsPerformed > 0)
            07 [@label003] 97 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_iMovesActionsPerformed> 00 ( 01 <XGUnitNativeBase.m_iMovesActionsPerformed> ) 25 16 
                //if(m_kUnit.GetCharacter().HasUpgrade(16))
                07 [@label002] 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 10 16 ) 
                    //fScatter *= 1.250;
                    B6 00 <.fScatter> 1E <%f 1.25> 16 
                //else
                06 [@label003] 
                    [#label002]
                    //fScatter *= float(2);
                    B6 00 <.fScatter> 38 3F 2C 02 16 
                [#label003]
            //if(!kFireAction.m_kShot.IsBlasterLauncherShot())
            07 [@label004] 81 19 19 00 <.kFireAction> [@] <XGAction_Fire.m_kShot> 00 ( 01 <XGAction_Fire.m_kShot> ) [@] <XGAbility_Targeted.IsBlasterLauncherShot.ReturnValue> 00 ( 1B <IsBlasterLauncherShot> 16 ) 16 
                //rRotate.Yaw = int((Atan(fScatter / float(20)) * fRoll) * 10430.220);
                0F 35 <Core.Object.Rotator.Yaw> <Core.Object.Rotator> 00 01 00 <.rRotate> 38 44 AB AB BE AC 00 <.fScatter> 38 3F 2C 14 16 16 00 <.fRoll> 16 1E <%f 10430.220> 16 
                //VDir = VDir >> rRotate;
                0F 00 <.VDir> 61 14 00 <.VDir> 00 <.rRotate> 16 
                //VDir = Normal(VDir);
                0F 00 <.VDir> E2 00 <.VDir> 16 
                //fChance *= (fScatter * (m_fDistanceToTarget / float(20)));
                B6 00 <.fChance> AB 00 <.fScatter> AC 01 <@m_fDistanceToTarget> 38 3F 2C 14 16 16 16 
                //fChance += m_fDistanceToTarget;
                B8 00 <.fChance> 01 <@m_fDistanceToTarget> 16 
                //m_vTargetLocation = m_kUnit.GetLocation() + (VDir * fChance);
                0F 01 <@m_vTargetLocation> D7 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) D4 00 <.VDir> 00 <.fChance> 16 16 
            [#label004]
            //m_kUnit.SetTimer(float(1), false, 'DelayRocketFire');
            19 01 <XGAbility.m_kUnit> [@] <NullRef> 00 ( 61 18 38 3F 26 28 21 <DelayRocketFire> 4A 16 ) 
            //if(VSize(vDest - m_vTargetLocation) >= 336.0)
            07 [@label005] B3 E1 D8 00 <.vDest> 01 <@m_vTargetLocation> 16 16 1E <%f 336> 16 
                //m_kUnit.SetTimer(float(5), false, 'DelaySpeechRocketScatter');
                19 01 <XGAbility.m_kUnit> [@] <NullRef> 00 ( 61 18 38 3F 2C 05 28 21 <DelaySpeechRocketScatter> 4A 16 ) 
            [#label005]
        //kFireAction.SetTargetLoc(m_vTargetLocation);
        19 00 <.kFireAction> [@] <NullRef> 00 ( 1B <SetTargetLoc> 01 <@m_vTargetLocation> 16 ) 
        //m_bHit = false;
        14 2D 01 <@m_bHit> 28 
        //m_bHit_NonUnitTarget = true;
        14 2D 01 <@m_bHit_NonUnitTarget> 27 
    //else
    06 [@label007] 
        [#label006]
        //m_fDistanceToTarget = VSize(m_kUnit.GetLocation() - m_vTargetLocation) / float(64);
        0F 01 <@m_fDistanceToTarget> AC E1 D8 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 01 <@m_vTargetLocation> 16 16 38 3F 2C 40 16 
        //m_iHitChance_NonUnitTarget = 100;
        0F 01 <@m_iHitChance_NonUnitTarget> 2C 64 
        //m_bHit = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.RollForHit_NonUnitTarget(float(m_iHitChance_NonUnitTarget) * 0.010, m_kUnit.GetCharacter().m_kChar, fRoll);
        14 2D 01 <@m_bHit> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.RollForHit_NonUnitTarget.ReturnValue> 00 ( 1B <RollForHit_NonUnitTarget> AB 38 3F 01 <@m_iHitChance_NonUnitTarget> 1E <%f 0.01> 16 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 00 <.fRoll> 16 ) 
    [#label007]
    //CalcDamage();
    1B <CalcDamage> 16 
    //return;
    04 0B 
[#label008]
//if(HasProperty(33))
07 [@label016] 1B <HasProperty> 24 21 16 
    //if(XComTacticalCheatManager(GetALocalPlayerController().CheatManager).bDeadEye || iType == 40)
    07 [@label009] 84 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.bDeadEye> 00 ( 2D 01 <XComTacticalCheatManager.bDeadEye> ) 18 [@] ( 9A 01 <XGAbility.iType> 2C 28 16 16 ) 
        //m_bHit = true;
        14 2D 01 <@m_bHit> 27 
    //else
    06 [@label014] 
        [#label009]
        //if(XComTacticalCheatManager(GetALocalPlayerController().CheatManager).bNoLuck)
        07 [@label010] 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.bNoLuck> 00 ( 2D 01 <XComTacticalCheatManager.bNoLuck> ) 
            //m_bHit = false;
            14 2D 01 <@m_bHit> 28 
        //else
        06 [@label014] 
            [#label010]
			
            //if(iType == 60 || iType == 39)
            07 [@label011] 84 9A 01 <XGAbility.iType> 2C 3C 16 18 [@] ( 9A 01 <XGAbility.iType> 2C <%b 39> 16 16 )
			
                //iAdjustedChance = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.MIND_CONTROL_DIFFICULTY;
                0F 00 <.iAdjustedChance> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> 00 ( 01 <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> ) 
            [#label011]
            //if(iType == 40)
            07 [@label012] 9A 01 <XGAbility.iType> 2C 28 16 
                //iAdjustedChance = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.EXALT_LOOT3;
                0F 00 <.iAdjustedChance> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.EXALT_LOOT3> 00 ( 01 <XGTacticalGameCoreNativeBase.EXALT_LOOT3> ) 
            [#label012]
			
            //m_bHit = m_kUnit.PassesWillTest(GetPrimaryTarget().RecordMoraleLoss(6), iAdjustedChance, false, GetPrimaryTarget());
            14 2D 01 <@m_bHit> 19 01 <XGAbility.m_kUnit> [@] <XGUnit.PassesWillTest.ReturnValue> 00 ( 1B <PassesWillTest> 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 02 2C <!DefensiveCombatStim> 16 16 ) 00 <.iAdjustedChance> 28 1B <GetPrimaryTarget> 16 4A 16 ) 
           
		   //if(m_bHit)
            07 [@label013] 2D 01 <@m_bHit> 
                //if(XGBattle_SP(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle) != none)
                07 [@label013] 77 2E <Class.XGBattle_SP> 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) 2A 16 
                    //if(iType == 60)
                    07 [@label013] 9A 01 <XGAbility.iType> 2C 3C 16 
                        //XGCharacter_Soldier(m_kUnit.GetCharacter()).AddPsiXP(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CalcXP(m_kUnit, 11, GetPrimaryTarget()));
                        19 2E <Class.XGCharacter_Soldier> 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <NullRef> 00 ( 1B <AddPsiXP> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.CalcXP.ReturnValue> 00 ( 1B <CalcXP> 01 <XGAbility.m_kUnit> 2C 0B 1B <GetPrimaryTarget> 16 16 ) 16 ) 
                        //if((GetPrimaryTarget().GetCharacter().m_kChar.iType == 12) || GetPrimaryTarget().GetCharacter().m_kChar.iType == 19)
                        07 [@label013] 84 9A 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 0C 16 18 [@] ( 9A 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 13 16 16 ) 
                            //XComOnlineEventMgr(GameEngine(class'Engine'.static.GetEngine()).OnlineEventManager).UnlockAchievement(2);
                            19 2E <Class.XComOnlineEventMgr> 19 2E <Engine.GameEngine> 12 20 <Engine.Engine> [@] <Engine.Engine.GetEngine.ReturnValue> 00 ( 1C <Engine.Engine.GetEngine> 16 ) [@] <Engine.GameEngine.OnlineEventManager> 00 ( 01 <Engine.GameEngine.OnlineEventManager> ) [@] <NullRef> 00 ( 1B <UnlockAchievement> 24 02 16 ) 
                            //m_kUnit.GetCharacter().m_kChar.aUpgrades[71] += 2;
                            A1 1A 2C 47 35 <XGTacticalGameCoreNativeBase.TCharacter.aUpgrades> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <NullRef> 00 ( 01 <XGCharacter.m_kChar> ) 2C 02 16 
                        [#label013]
            //if(HasEffect(1))
            07 [@label014] 1B <HasEffect> 24 01 16 
                //CalcDamage();
                1B <CalcDamage> 16 
            [#label014]
    //if(!HasEffect(1))
    07 [@label015] 81 1B <HasEffect> 24 01 16 16 
        //return;
        04 0B 
    [#label015]
//else
06 [@label028] 
    [#label016]
    //if(m_kUnit.IsPanicActive())
    07 [@label017] 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.IsPanicActive.ReturnValue> 00 ( 1B <IsPanicActive> 4A 16 ) 
        //m_iHitChance -= XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.PANIC_SHOT_HIT_PENALTY;
        A2 01 <@m_iHitChance> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.PANIC_SHOT_HIT_PENALTY> 00 ( 01 <XGTacticalGameCoreNativeBase.PANIC_SHOT_HIT_PENALTY> ) 16 
    [#label017]
    //if(((m_iHitChance == 100) || HasProperty(37)) && !m_bReactionFire)
    07 [@label018] 82 84 9A 01 <@m_iHitChance> 2C 64 16 18 [@] ( 1B <HasProperty> 24 25 16 16 ) 18 [@] ( 81 2D 01 <XGAbility.m_bReactionFire> 16 16 ) 
        //m_bHit = true;
        14 2D 01 <@m_bHit> 27 
    //else
    06 [@label028] 
        [#label018]
        //if(XComTacticalCheatManager(GetALocalPlayerController().CheatManager).bDeadEye)
        07 [@label019] 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.bDeadEye> 00 ( 2D 01 <XComTacticalCheatManager.bDeadEye> ) 
            //fChance = 1.0;
            0F 00 <.fChance> 1E <%f 1> 
        //else
        06 [@label021] 
            [#label019]
            //if(XComTacticalCheatManager(GetALocalPlayerController().CheatManager).bNoLuck)
            07 [@label020] 19 2E <Class.XComTacticalCheatManager> 19 1C <Engine.Actor.GetALocalPlayerController> 16 [@] <Engine.PlayerController.CheatManager> 00 ( 01 <Engine.PlayerController.CheatManager> ) [@] <XComTacticalCheatManager.bNoLuck> 00 ( 2D 01 <XComTacticalCheatManager.bNoLuck> ) 
                //fChance = 0.0;
                0F 00 <.fChance> 1E <%f 0> 
            //else
            06 [@label021] 
                [#label020]
                //iAdjustedChance = AdjustToHit(GetHitChance());
                0F 00 <.iAdjustedChance> 1B <AdjustToHit> 1B <GetHitChance> 16 16 
                //fChance = float(iAdjustedChance) / 100.0;
                0F 00 <.fChance> AC 38 3F 00 <.iAdjustedChance> 1E <%f 100> 16 
            [#label021]
        //if((GetPrimaryTarget()) != none)
        07 [@label028] 77 1B <GetPrimaryTarget> 16 2A 16 
            //if(m_bReactionFire)
            07 [@label026] 2D 01 <XGAbility.m_bReactionFire> 
                //if((((GetPrimaryTarget().GetCharacter().m_kChar.iType == 16) || GetPrimaryTarget().GetCharacter().m_kChar.iType == 21) || GetPrimaryTarget().IsATank()) || GetPrimaryTarget().IsAugmented())
                07 [@label022] 84 84 84 9A 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 10 16 18 [@] ( 9A 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 15 16 16 ) 18 [@] ( 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.IsATank.ReturnValue> 00 ( 1B <IsATank> 16 ) 16 ) 18 [@] ( 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.IsAugmented.ReturnValue> 00 ( 1B <IsAugmented> 16 ) 16 ) 
                    //if(!GetPrimaryTarget().GetCharacter().HasUpgrade(35))
                    07 [@label022] 81 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 23 16 ) 16 
                        //if(!m_kUnit.GetCharacter().HasUpgrade(10) && !m_kUnit.GetCharacter().HasUpgrade(133))
                        07 [@label022] 82 81 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 0A 16 ) 16 18 [@] ( 81 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 85 16 ) 16 16 ) 
                            //fChance /= class'XGTacticalGameCore'.default.SW_MORE_POWER;
                            B7 00 <.fChance> 12 20 <Class.XGTacticalGameCore> [@] <XGTacticalGameCoreNativeBase.SW_MORE_POWER> 00 ( 02 <XGTacticalGameCoreNativeBase.SW_MORE_POWER> ) 16 
                        [#label022]
                //if(GetPrimaryTarget().GetCharacter().HasUpgrade(35))
                07 [@label026] 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 23 16 ) 
                    //fChance *= ((GetPrimaryTarget().m_bLightningReflexesUsed) ? 0.30 : 0.10);
                    B6 00 <.fChance> 45 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.m_bLightningReflexesUsed> 00 ( 2D 01 <XGUnitNativeBase.m_bLightningReflexesUsed> ) [@] ( 1E <%f 0.3> ) [@] ( 1E <%f 0.1> ) 16 
                    //if(class'XGTacticalGameCoreNativeBase'.static.TInventoryHasItemType(GetPrimaryTarget().GetCharacter().m_kChar.kInventory, 94))
                    07 [@label023] 12 20 <Class.XGTacticalGameCoreNativeBase> [@] <XGTacticalGameCoreNativeBase.TInventoryHasItemType.ReturnValue> 00 ( 1C <XGTacticalGameCoreNativeBase.TInventoryHasItemType> 35 <XGTacticalGameCoreNativeBase.TCharacter.kInventory> <XGTacticalGameCoreNativeBase.TCharacter> 00 01 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 5E 16 ) 
                        //fChance *= 0.50;
                        B6 00 <.fChance> 1E <%f 0.5> 16 
                    [#label023]
                    //GetPrimaryTarget().m_bLightningReflexesUsed = true;
                    14 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.m_bLightningReflexesUsed> 00 ( 2D 01 <XGUnitNativeBase.m_bLightningReflexesUsed> ) 27 
                    //if(m_kUnit.IsMine() || XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.IsOptionEnabled(28))
                    07 [@label024] 84 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.IsMine.ReturnValue> 00 ( 1B <IsMine> 16 ) 18 [@] ( 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.IsOptionEnabled.ReturnValue> 00 ( 1B <IsOptionEnabled> 24 1C 16 ) 16 ) 
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(((XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(1) $ ": ") $ string(int(100.0 * fChance))) $ "%", GetPrimaryTarget().GetLocation(), 3,,, m_kUnit.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 70 70 70 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 01 16 ) 1F <%t ": "> 16 38 53 38 44 AB 1E <%f 100> 00 <.fChance> 16 16 1F <%t "%"> 16 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 4A 4A 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                    //else
                    06 [@label025] 
                        [#label024]
                        //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetUnexpandedLocalizedMessageString(1), GetPrimaryTarget().GetLocation(), 3,,, m_kUnit.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnexpandedLocalizedString');
                        0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetUnexpandedLocalizedMessageString.ReturnValue> 00 ( 1B <GetUnexpandedLocalizedMessageString> 24 01 16 ) 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 4A 4A 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 16 ) 
                    [#label025]
                    //if(kBroadcastWorldMessage != none)
                    07 [@label026] 77 00 <.kBroadcastWorldMessage> 2A 16 
                        //XComUIBroadcastWorldMessage_UnexpandedLocalizedString(kBroadcastWorldMessage).Init_UnexpandedLocalizedString(1, GetPrimaryTarget().GetLocation(), 3, m_kUnit.m_eTeamVisibilityFlags);
                        19 2E <Class.XComUIBroadcastWorldMessage_UnexpandedLocalizedString> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnexpandedLocalizedString> 24 01 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 03 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                    [#label026]
            //m_bHit = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.RollForHit(fChance, m_kUnit.GetCharacter().m_kChar, GetPrimaryTarget().GetCharacter().m_kChar, fRoll);
            14 2D 01 <@m_bHit> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.RollForHit.ReturnValue> 00 ( 1B <RollForHit> 00 <.fChance> 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 00 <.fRoll> 16 ) 
            //if(!IsReactionShot())
            07 [@label027] 81 1B <IsReactionShot> 16 16 
                //m_bReflected = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CalcReflection(GetType(), m_kWeapon.GameplayType(), m_kUnit.GetCharacter().m_kChar, GetPrimaryTarget().GetCharacter().m_kChar, m_bHit);
                14 2D 01 <@m_bReflected> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.CalcReflection.ReturnValue> 00 ( 1B <CalcReflection> 1B <GetType> 16 38 3A 19 01 <@m_kWeapon> [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <GameplayType> 16 ) 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2D 01 <@m_bHit> 16 ) 
            [#label027]
            //if(m_bReflected)
            07 [@label028] 2D 01 <@m_bReflected> 
                //kTag.StrValue0 = GetPrimaryTarget().SafeGetCharacterName();
                0F 19 00 <.kTag> [@] <XGParamTag.StrValue0> 00 ( 01 <XGParamTag.StrValue0> ) 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.SafeGetCharacterName.ReturnValue> 00 ( 1B <SafeGetCharacterName> 16 ) 
                //kBroadcastWorldMessage = XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetWorldMessenger().Message(class'XComLocalizer'.static.ExpandString(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.m_aExpandedLocalizedStrings[2]), GetPrimaryTarget().GetLocation(), 4,,, m_kUnit.m_eTeamVisibilityFlags,,,, class'XComUIBroadcastWorldMessage_UnitReflectedAttack');
                0F 00 <.kBroadcastWorldMessage> 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetWorldMessenger.ReturnValue> 00 ( 1B <GetWorldMessenger> 16 ) [@] <UIWorldMessageMgr.Message.ReturnValue> 00 ( 1B <Message> 12 20 <Class.XComLocalizer> [@] <XComLocalizer.ExpandString.ReturnValue> 00 ( 1B <ExpandString> 1A 2C 02 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.m_aExpandedLocalizedStrings> 00 ( 01 <XGTacticalGameCore.m_aExpandedLocalizedStrings> ) 4A 16 ) 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 04 4A 4A 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 4A 4A 4A 20 <Class.XComUIBroadcastWorldMessage_UnitReflectedAttack> 16 ) 
                //if(kBroadcastWorldMessage != none)
                07 [@label028] 77 00 <.kBroadcastWorldMessage> 2A 16 
                    //XComUIBroadcastWorldMessage_UnitReflectedAttack(kBroadcastWorldMessage).Init_UnitReflectedAttack(GetPrimaryTarget(), GetPrimaryTarget().GetLocation(), 4, m_kUnit.m_eTeamVisibilityFlags);
                    19 2E <Class.XComUIBroadcastWorldMessage_UnitReflectedAttack> 00 <.kBroadcastWorldMessage> [@] <NullRef> 00 ( 1B <Init_UnitReflectedAttack> 1B <GetPrimaryTarget> 16 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetLocation.ReturnValue> 00 ( 1B <GetLocation> 16 ) 24 04 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.m_eTeamVisibilityFlags> 00 ( 01 <Engine.Actor.m_eTeamVisibilityFlags> ) 16 ) 
                    //m_bHit = true;
                    14 2D 01 <@m_bHit> 27 
                [#label028]
//if((m_bReactionFire && !m_kUnit.GetCharacter().HasUpgrade(10)) || (GetType()) == 53)
07 [@label029] 84 82 2D 01 <XGAbility.m_bReactionFire> 18 [@] ( 81 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 0A 16 ) 16 16 ) 18 [@] ( 9A 1B <GetType> 16 2C 35 16 16 ) 
//else
06 [@label030] 
    [#label029]
    //if((((m_bHit && !m_bReflected) && (GetCriticalChance()) > 0) && (GetPrimaryTarget()) != none) && !GetPrimaryTarget().IsCivilian())
    07 [@label030] 82 82 82 82 2D 01 <@m_bHit> 18 [@] ( 81 2D 01 <@m_bReflected> 16 16 ) 18 [@] ( 97 1B <GetCriticalChance> 16 25 16 16 ) 18 [@] ( 77 1B <GetPrimaryTarget> 16 2A 16 16 ) 18 [@] ( 81 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.IsCivilian.ReturnValue> 00 ( 1B <IsCivilian> 16 ) 16 16 ) 
        //RollForCritical();
        1B <RollForCritical> 16 
    [#label030]
//if(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.IsOptionEnabled(28) && (GetPrimaryTarget()) != none)
07 [@label031] 82 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.IsOptionEnabled.ReturnValue> 00 ( 1B <IsOptionEnabled> 24 1C 16 ) 18 [@] ( 77 1B <GetPrimaryTarget> 16 2A 16 16 ) 
    //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).MSGArmorFragments(self);
    19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <NullRef> 00 ( 1B <MSGArmorFragments> 17 16 ) 
[#label031]
//if(m_bReactionFire)
07 [@label032] 2D 01 <XGAbility.m_bReactionFire> 
    //XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).MSGOverwatchShot(self);
    19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <NullRef> 00 ( 1B <MSGOverwatchShot> 17 16 ) 
[#label032]
//CalcDamage();
1B <CalcDamage> 16 
//return;
04 0B 
53 



OBJECT=XGAIBehavior_Psi.AddBestPsiAbilityToList:AUTO

[REPLACEMENT_CODE]
//bLowestWill = true;
49 [@] ( 27 15 ) 
//m_kUnit.GetAbilitiesOfType(arrAllAbilities, iType);
19 01 <XGAIBehavior.m_kUnit> [@] <XGUnit.GetAbilitiesOfType.ReturnValue> 00 ( 1B <GetAbilitiesOfType> 00 <.arrAllAbilities> 00 <.iType> 4A 16 ) 
//bHasUnshieldedMechtoids = m_kPlayer.HasUnshieldedMechtoids();
14 2D 00 <.bHasUnshieldedMechtoids> 19 01 <XGAIBehavior.m_kPlayer> [@] <XGAIPlayer.HasUnshieldedMechtoids.ReturnValue> 00 ( 1B <HasUnshieldedMechtoids> 16 ) 
//foreach arrAllAbilities(kAbility,)
58 00 <.arrAllAbilities> 00 <.kAbility> 00 4A [@label008] 
    //if((kAbility != none) && kAbility.CheckAvailable())
    07 [@label007] 82 77 00 <.kAbility> 2A 16 18 [@] ( 19 00 <.kAbility> [@] <XGAbility.CheckAvailable.ReturnValue> 00 ( 1C <XGAbility.CheckAvailable> 16 ) 16 ) 
        //kTarget = kAbility.GetPrimaryTarget();
        0F 00 <.kTarget> 19 00 <.kAbility> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 
        //if(((kTarget == none) || !kTarget.IsAliveAndWell()) || kAbility.GetHitChance() < 20)
        07 [@label001] 84 84 72 00 <.kTarget> 2A 16 18 [@] ( 81 19 00 <.kTarget> [@] <XGUnitNativeBase.IsAliveAndWell.ReturnValue> 00 ( 1B <IsAliveAndWell> 4A 16 ) 16 16 ) 18 [@] ( 96 19 00 <.kAbility> [@] <XGAbility_Targeted.GetHitChance.ReturnValue> 00 ( 1B <GetHitChance> 16 ) 2C 14 16 16 ) 
        31 
            //continue;
            06 [@label008] 
        [#label001]
        //if(bLowestWill)
        07 [@label003] 2D 00 <.bLowestWill> 
		
            //iStat = kTarget.RecordMoraleLoss(6);
            0F 00 <.iStat> 19 00 <.kTarget> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 02 2C <!DefensiveCombatStim> 16 16 ) 
			
            //if((kBestAbility == none) || iStat < iBestStat)
            07 [@label002] 84 72 00 <.kBestAbility> 2A 16 18 [@] ( 96 00 <.iStat> 00 <.iBestStat> 16 16 ) 
                //kBestAbility = kAbility;
                0F 00 <.kBestAbility> 00 <.kAbility> 
                //iBestStat = iStat;
                0F 00 <.iBestStat> 00 <.iStat> 
            [#label002]
            //continue;
            06 [@label007] 
        [#label003]
        //if(iType == 34)
        07 [@label007] 9A 00 <.iType> 2C 22 16 
            //iCharType = kTarget.GetCharType();
            0F 00 <.iCharType> 19 00 <.kTarget> [@] <XGUnitNativeBase.GetCharType.ReturnValue> 00 ( 1B <GetCharType> 16 ) 
            //if((iCharType != 21) && kTarget.m_kBehavior.HasStartedTurn())
            07 [@label004] 82 9B 00 <.iCharType> 2C 15 16 18 [@] ( 19 19 00 <.kTarget> [@] <XGUnitNativeBase.m_kBehavior> 00 ( 01 <XGUnitNativeBase.m_kBehavior> ) [@] <XGAIBehavior.HasStartedTurn.ReturnValue> 00 ( 1B <HasStartedTurn> 16 ) 16 ) 
            31 
                //continue;
                06 [@label008] 
            [#label004]
            //if(bHasUnshieldedMechtoids && iCharType != 21)
            07 [@label005] 82 2D 00 <.bHasUnshieldedMechtoids> 18 [@] ( 9B 00 <.iCharType> 2C 15 16 16 ) 
            31 
                //continue;
                06 [@label008] 
            [#label005]
            //m_kPlayer.GetNearestEnemy(m_kUnit.Location, fMyDist, false);
            19 01 <XGAIBehavior.m_kPlayer> [@] <XGAIPlayer.GetNearestEnemy.ReturnValue> 00 ( 1B <GetNearestEnemy> 19 01 <XGAIBehavior.m_kUnit> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 00 <.fMyDist> 28 4A 16 ) 
            //m_kPlayer.GetNearestEnemy(kTarget.Location, fDist, false);
            19 01 <XGAIBehavior.m_kPlayer> [@] <XGAIPlayer.GetNearestEnemy.ReturnValue> 00 ( 1B <GetNearestEnemy> 19 00 <.kTarget> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 00 <.fDist> 28 4A 16 ) 
            //if((iCharType != 21) && fMyDist < fDist)
            07 [@label006] 82 9B 00 <.iCharType> 2C 15 16 18 [@] ( B0 00 <.fMyDist> 00 <.fDist> 16 16 ) 
            31 
                //continue;
                06 [@label008] 
            [#label006]
            //if((kBestAbility == none) || (fDist < fBestDist) || (iCharType == 21) && iBestTargetType != 21)
            07 [@label007] 84 72 00 <.kBestAbility> 2A 16 18 [@] ( 84 B0 00 <.fDist> 00 <.fBestDist> 16 18 [@] ( 82 9A 00 <.iCharType> 2C 15 16 18 [@] ( 9B 00 <.iBestTargetType> 2C 15 16 16 ) 16 ) 16 ) 
                //kBestAbility = kAbility;
                0F 00 <.kBestAbility> 00 <.kAbility> 
                //fBestDist = fDist;
                0F 00 <.fBestDist> 00 <.fDist> 
                //iBestTargetType = iCharType;
                0F 00 <.iBestTargetType> 00 <.iCharType> 
            [#label007]
                31 
            [#label008]
                30 
//if(kBestAbility != none)
07 [@label009] 77 00 <.kBestAbility> 2A 16 
    //arrAbilities_Out.AddItem(kBestAbility);
    55 48 <.arrAbilities_Out> [@] ( 00 <.kBestAbility> 16 ) 
[#label009]
//return;
04 0B 
53 



OBJECT=XGAIPlayer.FindCommonFrayAttackTargets:AUTO

[REPLACEMENT_CODE]
//arrFrayTarget.Length = 0;
0F 36 00 <.arrFrayTarget> 25 
//foreach arrFrayOptions(kOption,)
58 00 <.arrFrayOptions> 00 <.kOption> 00 4A [@label009] 
    //kFrayer = kOption.kFrayer;
    0F 00 <.kFrayer> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> 
    //foreach kOption.akFrayTargets(kFrayTarget,)
    58 35 <XGAIPlayer.mindfray_option.akFrayTargets> <@mindfray_option> 00 00 00 <.kOption> 00 <.kFrayTarget> 00 4A [@label008] 
        //if(arrFrayTarget.Find(kFrayTarget) != -1)
        07 [@label001] 9B 46 00 <.arrFrayTarget> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 
        31 
            //continue;
            06 [@label008] 
        [#label001]
        //foreach arrFrayOptions(kAttackOption,)
        58 00 <.arrFrayOptions> 00 <.kAttackOption> 00 4A [@label007] 
            //if(kFrayer == kAttackOption.kFrayer)
            07 [@label002] 72 00 <.kFrayer> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kAttackOption> 16 
            31 
                //continue;
                06 [@label007] 
            [#label002]
            //if((kAttackOption.akPsiControlTargets.Find(kFrayTarget) != -1) || kAttackOption.akPsiPanicTargets.Find(kFrayTarget) != -1)
            07 [@label006] 84 9B 46 35 <XGAIPlayer.mindfray_option.akPsiControlTargets> <@mindfray_option> 00 00 00 <.kAttackOption> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 18 [@] ( 9B 46 35 <XGAIPlayer.mindfray_option.akPsiPanicTargets> <@mindfray_option> 00 00 00 <.kAttackOption> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 16 ) 
               
			   //iWill = kFrayTarget.RecordMoraleLoss(6);
                0F 00 <.iWill> 19 00 <.kFrayTarget> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 02 2C <!DefensiveCombatStim> 16 16 ) 
                
				//iTarget = 0;
                0F 00 <.iTarget> 25 
            [#label003]
                //if(iTarget < arrFrayTarget.Length) [Loop If]
                07 [@label005] 96 00 <.iTarget> 36 00 <.arrFrayTarget> 16 
				
                    //if(iWill < arrFrayTarget[iTarget].RecordMoraleLoss(6))
                    07 [@label004] 96 00 <.iWill> 19 10 00 <.iTarget> 00 <.arrFrayTarget> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 02 2C <!DefensiveCombatStim> 16 16 ) 16 
					
                        //goto J0x1D8;
                        06 [@label005] 
                    [#label004]
                    //++ iTarget;
                    A5 00 <.iTarget> 16 
                    //goto J0x178; [Loop Continue]
                    06 [@label003] 
                [#label005]
                //arrFrayTarget.InsertItem(iTarget, kFrayTarget);
                57 00 <.arrFrayTarget> [@] ( 00 <.iTarget> 00 <.kFrayTarget> 16 ) 
                //break;
                06 [@label007] 
            [#label006]
                31 
            [#label007]
                30 
                31 
            [#label008]
                30 
                31 
            [#label009]
                30 
//if(arrFrayTarget.Length > 0)
07 [@label024] 97 36 00 <.arrFrayTarget> 25 16 
    //kFrayTarget = arrFrayTarget[0];
    0F 00 <.kFrayTarget> 10 25 00 <.arrFrayTarget> 
    //foreach arrFrayOptions(kOption,)
    58 00 <.arrFrayOptions> 00 <.kOption> 00 4A [@label017] 
        //fDist = VSizeSq(kOption.kFrayer.Location - kFrayTarget.Location);
        0F 00 <.fDist> E4 D8 19 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 19 00 <.kFrayTarget> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 16 16 
        //if(kOption.akFrayTargets.Find(kFrayTarget) != -1)
        07 [@label013] 9B 46 35 <XGAIPlayer.mindfray_option.akFrayTargets> <@mindfray_option> 00 00 00 <.kOption> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 
            //iTarget = 0;
            0F 00 <.iTarget> 25 
        [#label010]
            //if(iTarget < arrFrayers.Length) [Loop If]
            07 [@label012] 96 00 <.iTarget> 36 00 <.arrFrayers> 16 
                //if(fDist < arrFrayerDist[iTarget])
                07 [@label011] B0 00 <.fDist> 10 00 <.iTarget> 00 <.arrFrayerDist> 16 
                    //goto J0x321;
                    06 [@label012] 
                [#label011]
                //++ iTarget;
                A5 00 <.iTarget> 16 
                //goto J0x2D7; [Loop Continue]
                06 [@label010] 
            [#label012]
            //arrFrayers.InsertItem(iTarget, kOption.kFrayer);
            57 00 <.arrFrayers> [@] ( 00 <.iTarget> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> 16 ) 
            //arrFrayerDist.InsertItem(iTarget, fDist);
            57 00 <.arrFrayerDist> [@] ( 00 <.iTarget> 00 <.fDist> 16 ) 
        [#label013]
        //if(kOption.akPsiControlTargets.Find(kFrayTarget) != -1)
        07 [@label014] 9B 46 35 <XGAIPlayer.mindfray_option.akPsiControlTargets> <@mindfray_option> 00 00 00 <.kOption> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 
            //if(fDist > fBestAttackDist)
            07 [@label014] B1 00 <.fDist> 00 <.fBestAttackDist> 16 
                //kAttacker = kOption.kFrayer;
                0F 00 <.kAttacker> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> 
                //fBestAttackDist = fDist;
                0F 00 <.fBestAttackDist> 00 <.fDist> 
            [#label014]
        //if(kOption.akPsiPanicTargets.Find(kFrayTarget) != -1)
        07 [@label016] 9B 46 35 <XGAIPlayer.mindfray_option.akPsiPanicTargets> <@mindfray_option> 00 00 00 <.kOption> [@] ( 00 <.kFrayTarget> 16 ) 1D <%i -1> 16 
            //if(kPanicker == none)
            07 [@label015] 72 00 <.kPanicker> 2A 16 
                //kPanicker = kOption.kFrayer;
                0F 00 <.kPanicker> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> 
                //continue;
                06 [@label016] 
            [#label015]
            //if(kBackupPanicker == none)
            07 [@label016] 72 00 <.kBackupPanicker> 2A 16 
                //kBackupPanicker = kOption.kFrayer;
                0F 00 <.kBackupPanicker> 35 <XGAIPlayer.mindfray_option.kFrayer> <@mindfray_option> 00 00 00 <.kOption> 
            [#label016]
                31 
            [#label017]
                30 
    //if(arrFrayers.Length == 0)
    07 [@label018] 9A 36 00 <.arrFrayers> 25 16 
        //return false;
        04 28 
    [#label018]
    //kFrayer = arrFrayers[0];
    0F 00 <.kFrayer> 10 25 00 <.arrFrayers> 
    //if(kAttacker == none)
    07 [@label021] 72 00 <.kAttacker> 2A 16 
        //kAttacker = kPanicker;
        0F 00 <.kAttacker> 00 <.kPanicker> 
        //if(kAttacker == kFrayer)
        07 [@label020] 72 00 <.kAttacker> 00 <.kFrayer> 16 
            //if(arrFrayers.Length == 1)
            07 [@label019] 9A 36 00 <.arrFrayers> 26 16 
                //kAttacker = kBackupPanicker;
                0F 00 <.kAttacker> 00 <.kBackupPanicker> 
            //else
            06 [@label020] 
                [#label019]
                //if(arrFrayers.Length > 1)
                07 [@label020] 97 36 00 <.arrFrayers> 26 16 
                    //kFrayer = arrFrayers[1];
                    0F 00 <.kFrayer> 10 26 00 <.arrFrayers> 
                [#label020]
    //else
    06 [@label023] 
        [#label021]
        //if(kAttacker == kFrayer)
        07 [@label023] 72 00 <.kAttacker> 00 <.kFrayer> 16 
            //if(arrFrayers.Length > 1)
            07 [@label022] 97 36 00 <.arrFrayers> 26 16 
                //kFrayer = arrFrayers[1];
                0F 00 <.kFrayer> 10 26 00 <.arrFrayers> 
            //else
            06 [@label023] 
                [#label022]
                //return false;
                04 28 
            [#label023]
    //m_kPsiAttacker = kAttacker;
    0F 01 <@m_kPsiAttacker> 00 <.kAttacker> 
    //m_kPriorityUnit = kFrayer;
    0F 01 <@m_kPriorityUnit> 00 <.kFrayer> 
    //m_kMindFrayTarget = kFrayTarget;
    0F 01 <@m_kMindFrayTarget> 00 <.kFrayTarget> 
    //return true;
    04 27 
[#label024]
//return false;
04 28 
//return ReturnValue;
04 3A <.ReturnValue> 
53 



OBJECT=XGTacticalGameCore.CalcRiftDamage:AUTO

[REPLACEMENT_CODE]
//if((kAttacker != none) && kVictim != none)
07 [@label009] 82 77 00 <.kAttacker> 2A 16 18 [@] ( 77 00 <.kVictim> 2A 16 16 ) 

    //if(kVictim.m_bInCombatDrugs)
    //07 [@label001] 19 00 <.kVictim> [@] <XGUnitNativeBase.m_bInCombatDrugs> 00 ( 2D 01 <XGUnitNativeBase.m_bInCombatDrugs> ) 
        //iWillMods = 20;
        //0F 00 <.iWillMods> 2C 14 
    //[#label001]
    //iWillMods += (kVictim.GetBattleFatigueWillPenalty() + kVictim.GetFallenComradesWillPenalty());
    //A1 00 <.iWillMods> 92 19 00 <.kVictim> [@] <XGUnitNativeBase.GetBattleFatigueWillPenalty.ReturnValue> 00 ( 1B <GetBattleFatigueWillPenalty> 16 ) 19 00 <.kVictim> [@] <XGUnitNativeBase.GetFallenComradesWillPenalty.ReturnValue> 00 ( 1B <GetFallenComradesWillPenalty> 16 ) 16 16 
    
	0F 00 <.iWillMods> 19 00 <.kVictim> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 03 2C <!DefensiveCombatStim> 16 16 )
	
	//kVictim.WillTestChance(0, iWillMods, false, false, kAttacker,, iFinalWill);
    19 00 <.kVictim> [@] <XGUnitNativeBase.WillTestChance.ReturnValue> 00 ( 1B <WillTestChance> 25 00 <.iWillMods> 28 28 00 <.kAttacker> 4A 00 <.iFinalWill> 16 ) 
    //iAttackerWill = kAttacker.RecordMoraleLoss(0) - 20;
    0F 00 <.iAttackerWill> 93 19 00 <.kAttacker> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 00 2C <!OffensiveCombatStim> 16 16 ) 2C 14 16 
   
   //if(bInitialBlast)
    07 [@label002] 2D 00 <.bInitialBlast> 
        //iDamage = 8;
        0F 00 <.iDamage> 2C 08 
    //else
    06 [@label003] 
        [#label002]
        //iDamage = 10;
        0F 00 <.iDamage> 2C 0A 
    [#label003]
    //if(iFinalWill > iAttackerWill)
    07 [@label004] 97 00 <.iFinalWill> 00 <.iAttackerWill> 16 
        //iDamage -= ((iFinalWill - iAttackerWill) / 10);
        A2 00 <.iDamage> 91 93 00 <.iFinalWill> 00 <.iAttackerWill> 16 2C 0A 16 16 
    //else
    06 [@label005] 
        [#label004]
        //if(iAttackerWill > iFinalWill)
        07 [@label005] 97 00 <.iAttackerWill> 00 <.iFinalWill> 16 
            //iDamage += ((iAttackerWill - iFinalWill) / 10);
            A1 00 <.iDamage> 91 93 00 <.iAttackerWill> 00 <.iFinalWill> 16 2C 0A 16 16 
        [#label005]
    //if(bInitialBlast)
    07 [@label007] 2D 00 <.bInitialBlast> 
        //if(iDamage < 4)
        07 [@label006] 96 00 <.iDamage> 2C 04 16 
            //iDamage = 4;
            0F 00 <.iDamage> 2C 04 
        [#label006]
    //else
    06 [@label008] 
        [#label007]
        //if(iDamage < 5)
        07 [@label008] 96 00 <.iDamage> 2C 05 16 
            //iDamage = 5;
            0F 00 <.iDamage> 2C 05 
        [#label008]
    //iDamage = kVictim.AbsorbDamage(iDamage, kAttacker, none);
    0F 00 <.iDamage> 19 00 <.kVictim> [@] <XGUnit.AbsorbDamage.ReturnValue> 00 ( 1B <AbsorbDamage> 00 <.iDamage> 00 <.kAttacker> 2A 16 ) 
[#label009]
//return iDamage;
04 00 <.iDamage> 
//return ReturnValue;
04 3A <.ReturnValue> 
53 



OBJECT=XGTacticalGameCore.CalcPsiLanceDamage:AUTO

[REPLACEMENT_CODE]
//if((kAttacker != none) && kVictim != none)
07 [@label005] 82 77 00 <.kAttacker> 2A 16 18 [@] ( 77 00 <.kVictim> 2A 16 16 ) 
    
	//if(kVictim.m_bInCombatDrugs)
    //07 [@label001] 19 00 <.kVictim> [@] <XGUnitNativeBase.m_bInCombatDrugs> 00 ( 2D 01 <XGUnitNativeBase.m_bInCombatDrugs> ) 
        //iWillMods = 20;
        //0F 00 <.iWillMods> 2C 14 
    //[#label001]
    //iWillMods += (kVictim.GetBattleFatigueWillPenalty() + kVictim.GetFallenComradesWillPenalty());
    //A1 00 <.iWillMods> 92 19 00 <.kVictim> [@] <XGUnitNativeBase.GetBattleFatigueWillPenalty.ReturnValue> 00 ( 1B <GetBattleFatigueWillPenalty> 16 ) 19 00 <.kVictim> [@] <XGUnitNativeBase.GetFallenComradesWillPenalty.ReturnValue> 00 ( 1B <GetFallenComradesWillPenalty> 16 ) 16 16 
    
	0F 00 <.iWillMods> 19 00 <.kVictim> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 03 2C <!DefensiveCombatStim> 16 16 )
	
	//kVictim.WillTestChance(0, iWillMods, false, false, kAttacker,, iFinalWill);
    19 00 <.kVictim> [@] <XGUnitNativeBase.WillTestChance.ReturnValue> 00 ( 1B <WillTestChance> 25 00 <.iWillMods> 28 28 00 <.kAttacker> 4A 00 <.iFinalWill> 16 ) 
    //iAttackerWill = kAttacker.RecordMoraleLoss(0) - 20;
    0F 00 <.iAttackerWill> 93 19 00 <.kAttacker> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 00 2C <!OffensiveCombatStim> 16 16 ) 2C 14 16 
    
	//iDamage = 7;
    0F 00 <.iDamage> 2C 07 
    //if(iFinalWill > iAttackerWill)
    07 [@label002] 97 00 <.iFinalWill> 00 <.iAttackerWill> 16 
        //iDamage -= ((iFinalWill - iAttackerWill) / 10);
        A2 00 <.iDamage> 91 93 00 <.iFinalWill> 00 <.iAttackerWill> 16 2C 0A 16 16 
    //else
    06 [@label003] 
        [#label002]
        //if(iAttackerWill > iFinalWill)
        07 [@label003] 97 00 <.iAttackerWill> 00 <.iFinalWill> 16 
            //iDamage += ((iAttackerWill - iFinalWill) / 10);
            A1 00 <.iDamage> 91 93 00 <.iAttackerWill> 00 <.iFinalWill> 16 2C 0A 16 16 
        [#label003]
    //if(iDamage > 20)
    07 [@label004] 97 00 <.iDamage> 2C 14 16 
        //iDamage = 20;
        0F 00 <.iDamage> 2C 14 
    //else
    06 [@label005] 
        [#label004]
        //if(iDamage < 2)
        07 [@label005] 96 00 <.iDamage> 2C 02 16 
            //iDamage = 2;
            0F 00 <.iDamage> 2C 02 
        [#label005]
//return iDamage;
04 00 <.iDamage> 
//return ReturnValue;
04 3A <.ReturnValue> 
53 


OBJECT=XGAction_Targeting.Executing.DrawSplashRadius:AUTO

[REPLACEMENT_CODE]
//bValid = true;
14 2D 00 <.bValid> 27 
//iType = m_kShot.GetType();
0F 00 <.iType> 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility.GetType.ReturnValue> 00 ( 1B <GetType> 16 ) 
//if(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.AbilityRequiresProjectilePreview(m_kShot))
07 [@label002] 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.AbilityRequiresProjectilePreview.ReturnValue> 00 ( 1B <AbilityRequiresProjectilePreview> 01 <XGAction_Targeting.m_kShot> 16 ) 
    //if(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kPrecomputedPath.iNumKeyframes <= 0)
    07 [@label001] 98 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kPrecomputedPath> 00 ( 01 <XComTacticalGRI.m_kPrecomputedPath> ) [@] <XComPrecomputedPath.iNumKeyframes> 00 ( 01 <XComPrecomputedPath.iNumKeyframes> ) 25 16 
        //return;
        04 0B 
    [#label001]
    //vCenter = XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kPrecomputedPath.GetEndPosition();
    0F 00 <.vCenter> 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kPrecomputedPath> 00 ( 01 <XComTacticalGRI.m_kPrecomputedPath> ) [@] <XComPrecomputedPath.GetEndPosition.ReturnValue> 00 ( 1B <GetEndPosition> 16 ) 
//else
06 [@label006] 
    [#label002]
    //if(iType == 63)
    07 [@label003] 9A 00 <.iType> 2C 3F 16 
        //vCenter = m_kUnit.Location;
        0F 00 <.vCenter> 19 01 <XGAction.m_kUnit> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 
    //else
    06 [@label006] 
        [#label003]
        //if(iType == 55)
        07 [@label004] 9A 00 <.iType> 2C 37 16 
            //vCenter = m_kUnit.GetPathingPawn().GetPathDestination();
            0F 00 <.vCenter> 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetPathingPawn.ReturnValue> 00 ( 1B <GetPathingPawn> 16 ) [@] <XComPathingPawn.GetPathDestination.ReturnValue> 00 ( 1B <GetPathDestination> 16 ) 
        //else
        06 [@label006] 
            [#label004]
            //if((iType == 84) || (m_kShot.m_kWeapon != none) && m_kShot.m_kWeapon.GameplayType() == 7)
            07 [@label005] 84 9A 00 <.iType> 2C 54 16 18 [@] ( 82 77 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) 2A 16 18 [@] ( 9A 38 3A 19 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <GameplayType> 16 ) 38 3A 24 07 16 16 ) 16 ) 
                //vCenter = ((m_bShotIsBlocked) ? m_vHitLocation : m_vTarget);
                0F 00 <.vCenter> 45 2D 01 <XGAction_Targeting.m_bShotIsBlocked> [@] ( 01 <XGAction_Targeting.m_vHitLocation> ) [@] ( 01 <XGAction_Targeting.m_vTarget> ) 
            //else
            06 [@label006] 
                [#label005]
                //vCenter = m_vTarget;
                0F 00 <.vCenter> 01 <XGAction_Targeting.m_vTarget> 
            [#label006]
//if(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_bIsTutorial)
07 [@label007] 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_bIsTutorial> 00 ( 2D 01 <XGBattleDesc.m_bIsTutorial> ) 
    //if((XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetTacticalHUD().m_kAbilityHUD.m_iUseOnlyAbility != -1) && XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetTacticalHUD().m_kAbilityHUD.m_iUseOnlyAbility != XComPresentationLayer(XComPlayerController(WorldInfo.GetALocalPlayerController()).m_Pres).GetTacticalHUD().m_kAbilityHUD.m_iCurrentIndex)
    07 [@label007] 82 9B 19 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetTacticalHUD.ReturnValue> 00 ( 1B <GetTacticalHUD> 16 ) [@] <UITacticalHUD.m_kAbilityHUD> 00 ( 01 <UITacticalHUD.m_kAbilityHUD> ) [@] <UITacticalHUD_AbilityContainer.m_iUseOnlyAbility> 00 ( 01 <UITacticalHUD_AbilityContainer.m_iUseOnlyAbility> ) 1D <%i -1> 16 18 [@] ( 9B 19 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetTacticalHUD.ReturnValue> 00 ( 1B <GetTacticalHUD> 16 ) [@] <UITacticalHUD.m_kAbilityHUD> 00 ( 01 <UITacticalHUD.m_kAbilityHUD> ) [@] <UITacticalHUD_AbilityContainer.m_iUseOnlyAbility> 00 ( 01 <UITacticalHUD_AbilityContainer.m_iUseOnlyAbility> ) 19 19 19 2E <Class.XComPresentationLayer> 19 2E <Class.XComPlayerController> 19 01 <Engine.Actor.WorldInfo> [@] <Engine.Actor.GetALocalPlayerController.ReturnValue> 00 ( 1C <Engine.Actor.GetALocalPlayerController> 16 ) [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetTacticalHUD.ReturnValue> 00 ( 1B <GetTacticalHUD> 16 ) [@] <UITacticalHUD.m_kAbilityHUD> 00 ( 01 <UITacticalHUD.m_kAbilityHUD> ) [@] <UITacticalHUD_AbilityContainer.m_iCurrentIndex> 00 ( 01 <UITacticalHUD_AbilityContainer.m_iCurrentIndex> ) 16 16 ) 
        //bValid = false;
        14 2D 00 <.bValid> 28 
    [#label007]
//if(m_kShot.m_kWeapon != none)
07 [@label008] 77 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) 2A 16 
    //fRadius = m_kShot.m_kWeapon.GetDamageRadius();
    0F 00 <.fRadius> 19 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility_Targeted.m_kWeapon> 00 ( 01 <XGAbility_Targeted.m_kWeapon> ) [@] <XGWeapon.GetDamageRadius.ReturnValue> 00 ( 1B <GetDamageRadius> 16 ) 
[#label008]
//switch(iType)
05 <.iType> 00 00 <.iType> 
    //case 55:
    0A [@label009] 2C 37 
        //fRadius = 100.0;
        0F 00 <.fRadius> 1E <%f 100> 
        //break;
        06 [@label019] 
    [#label009]
    //case 58:
    0A [@label010] 2C 3A 
        //fRadius = 6.750 * float(64);
        0F 00 <.fRadius> AB 1E <%f 6.75> 38 3F 2C 40 16 
        //bValid = XGAbility_Rift(m_kShot).IsValidRiftTarget(vCenter);
        14 2D 00 <.bValid> 19 2E <Class.XGAbility_Rift> 01 <XGAction_Targeting.m_kShot> [@] <XGAbility_Rift.IsValidRiftTarget.ReturnValue> 00 ( 1B <IsValidRiftTarget> 00 <.vCenter> 16 ) 
        //break;
        06 [@label019] 
    [#label010]
    //case 59:
    0A [@label011] 2C 3B 
        //fRadius = 12.750 * float(64);
        0F 00 <.fRadius> AB 1E <%f 12.75> 38 3F 2C 40 16 
        //break;
        06 [@label019] 
    [#label011]
    //case 11:
    0A [@label012] 2C 0B 
        //fRadius = 192.0;
        0F 00 <.fRadius> 1E <%f 192> 
        //break;
        06 [@label019] 
    [#label012]
    //case 63:
    0A [@label013] 2C 3F 
        //fRadius = 384.0;
        0F 00 <.fRadius> 1E <%f 384> 
        //break;
        06 [@label019] 
    [#label013]
    //case 61:
    0A [@label014] 2C 3D 
        //fRadius = 3.750 * float(64);
        0F 00 <.fRadius> AB 1E <%f 3.75> 38 3F 2C 40 16 
        //break;
        06 [@label019] 
    [#label014]
    //case 84:
    0A [@label015] 2C 54 
        //fRadius = class'XGAction_FireCustom_Barrage'.default.BarrageRadius * float(96);
        0F 00 <.fRadius> AB 12 20 <Class.XGAction_FireCustom_Barrage> [@] <XGAction_FireCustom_Barrage.BarrageRadius> 00 ( 02 <XGAction_FireCustom_Barrage.BarrageRadius> ) 38 3F 2C 60 16 
        //break;
        06 [@label019] 
    [#label015]
    //case 88:
    0A [@label016] 2C 58 
        //fRadius = class'XGAbility_Electropulse'.default.ElectroPulseXY_Range;
        0F 00 <.fRadius> 12 20 <Class.XGAbility_Electropulse> [@] <XGAbility_Electropulse.ElectroPulseXY_Range> 00 ( 02 <XGAbility_Electropulse.ElectroPulseXY_Range> ) 
        //break;
        06 [@label019] 
    [#label016]
    //case 52:
    0A [@label017] 2C 34 
        //fRadius *= 1.50;
        B6 00 <.fRadius> 1E <%f 1.5> 16 
        //break;
        06 [@label019] 
    [#label017]
    //case 14:
    0A [@label018] 2C 0E 
	
        //fRadius = float(2 * 96) * Sqrt(float(m_kUnit.RecordMoraleLoss()) / float(100));
        0F 00 <.fRadius> AB 38 3F 90 2C 02 2C 60 16 C1 AC 38 3F 19 01 <XGAction.m_kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 4A 16 ) 38 3F 2C 64 16 16 16 
        
        //break;
        06 [@label019] 
    [#label018]
    //default:
    0A FF FF 
        //break;
        06 [@label019] 
    [#label019]
//if(iType == 52)
07 [@label020] 9A 00 <.iType> 2C 34 16 
    //m_kShot.iType = 79;
    0F 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 4F 
    //UpdateShotTargetLocation(vCenter, fRadius);
    1C <XGAction_Targeting.UpdateShotTargetLocation> 00 <.vCenter> 00 <.fRadius> 16 
    //m_kShot.iType = 52;
    0F 19 01 <XGAction_Targeting.m_kShot> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 34 
//else
06 [@label021] 
    [#label020]
    //UpdateShotTargetLocation(vCenter, fRadius);
    1C <XGAction_Targeting.UpdateShotTargetLocation> 00 <.vCenter> 00 <.fRadius> 16 
[#label021]
//fRestrictedRange = fRadius;
0F 00 <.fRestrictedRange> 00 <.fRadius> 
//if(m_bTargetMustBeWithinCursorRange)
07 [@label025] 2D 01 <XGAction_Targeting.m_bTargetMustBeWithinCursorRange> 
    //if(m_fAllowedCursorRange > float(0))
    07 [@label022] B1 01 <XGAction_Targeting.m_fAllowedCursorRange> 38 3F 25 16 
        //fRestrictedRange = m_fAllowedCursorRange;
        0F 00 <.fRestrictedRange> 01 <XGAction_Targeting.m_fAllowedCursorRange> 
    [#label022]
    //if(m_bOnlyFireAtLocation)
    07 [@label023] 2D 01 <XGAction_Targeting.m_bOnlyFireAtLocation> 
        //fTest = VSizeSq(vCenter - m_vFireOnlyAtThisLocation);
        0F 00 <.fTest> E4 D8 00 <.vCenter> 01 <XGAction_Targeting.m_vFireOnlyAtThisLocation> 16 16 
    //else
    06 [@label024] 
        [#label023]
        //fTest = VSizeSq(vCenter - m_kFireOnlyAtThisUnit.Location);
        0F 00 <.fTest> E4 D8 00 <.vCenter> 19 01 <XGAction_Targeting.m_kFireOnlyAtThisUnit> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 16 16 
    [#label024]
    //fRestrictedRange = Square(fRestrictedRange);
    0F 00 <.fRestrictedRange> C2 00 <.fRestrictedRange> 16 
[#label025]
//if(!bValid || m_bTargetMustBeWithinCursorRange && fTest >= fRestrictedRange)
07 [@label026] 84 81 2D 00 <.bValid> 16 18 [@] ( 82 2D 01 <XGAction_Targeting.m_bTargetMustBeWithinCursorRange> 18 [@] ( B3 00 <.fTest> 00 <.fRestrictedRange> 16 16 ) 16 ) 
    //CylinderColor = MakeLinearColor(1.0, 0.20, 0.20, 0.20);
    0F 00 <.CylinderColor> 1C <Core.Object.MakeLinearColor> 1E <%f 1> 1E <%f 0.2> 1E <%f 0.2> 1E <%f 0.2> 16 
//else
06 [@label028] 
    [#label026]
    //if((m_iSplashHitsFriendliesCache > 0) || m_iSplashHitsFriendlyDestructibleCache > 0)
    07 [@label027] 84 97 01 <XGAction_Targeting.m_iSplashHitsFriendliesCache> 25 16 18 [@] ( 97 01 <XGAction_Targeting.m_iSplashHitsFriendlyDestructibleCache> 25 16 16 ) 
        //CylinderColor = MakeLinearColor(1.0, 0.810, 0.220, 0.20);
        0F 00 <.CylinderColor> 1C <Core.Object.MakeLinearColor> 1E <%f 1> 1E <%f 0.81> 1E <%f 0.22> 1E <%f 0.2> 16 
    //else
    06 [@label028] 
        [#label027]
        //CylinderColor = MakeLinearColor(0.20, 0.80, 1.0, 0.20);
        0F 00 <.CylinderColor> 1C <Core.Object.MakeLinearColor> 1E <%f 0.2> 1E <%f 0.8> 1E <%f 1> 1E <%f 0.2> 16 
    [#label028]
//ExplosionEmitter.SetLocation(vCenter);
19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Actor.SetLocation.ReturnValue> 00 ( 61 0B 00 <.vCenter> 16 ) 
//ExplosionEmitter.SetDrawScale(fRadius / 48.0);
19 01 <XGAction_Targeting.ExplosionEmitter> [@] <NullRef> 00 ( 1C <Engine.Actor.SetDrawScale> AC 00 <.fRadius> 1E <%f 48> 16 16 ) 
//ExplosionEmitter.SetRotation(rot(0, 0, 1));
19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Actor.SetRotation.ReturnValue> 00 ( 61 2B 22 <%i 1> <%i 0> <%i 0> 16 ) 
//if(!ExplosionEmitter.ParticleSystemComponent.bIsActive)
07 [@label029] 81 19 19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Emitter.ParticleSystemComponent> 00 ( 01 <Engine.Emitter.ParticleSystemComponent> ) [@] <Engine.ParticleSystemComponent.bIsActive> 00 ( 2D 01 <Engine.ParticleSystemComponent.bIsActive> ) 16 
    //ExplosionEmitter.ParticleSystemComponent.ActivateSystem();
    19 19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Emitter.ParticleSystemComponent> 00 ( 01 <Engine.Emitter.ParticleSystemComponent> ) [@] <NullRef> 00 ( 1C <Engine.ParticleSystemComponent.ActivateSystem> 4A 16 ) 
[#label029]
//ExplosionEmitter.ParticleSystemComponent.SetMICVectorParameter(0, name("RadiusColor"), CylinderColor);
19 19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Emitter.ParticleSystemComponent> 00 ( 01 <Engine.Emitter.ParticleSystemComponent> ) [@] <NullRef> 00 ( 1B <SetMICVectorParameter> 25 38 60 1F <%t "RadiusColor"> 00 <.CylinderColor> 16 ) 
//if(iType != 58)
07 [@label030] 9B 00 <.iType> 2C 3A 16 
    //ExplosionEmitter.ParticleSystemComponent.SetMICVectorParameter(1, name("RadiusColor"), CylinderColor);
    19 19 01 <XGAction_Targeting.ExplosionEmitter> [@] <Engine.Emitter.ParticleSystemComponent> 00 ( 01 <Engine.Emitter.ParticleSystemComponent> ) [@] <NullRef> 00 ( 1B <SetMICVectorParameter> 26 38 60 1F <%t "RadiusColor"> 00 <.CylinderColor> 16 ) 
[#label030]
//return;
04 0B 
53 



OBJECT=XGAbility_Targeted.GetUIHitChance:AUTO

[REPLACEMENT_CODE]
//if(HasProperty(33))
07 [@label007] 1B <HasProperty> 24 21 16 

	0F 00 <.iBonus> 93 19 01 <XGAbility.m_kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 01 2C <!OffensiveCombatStim> 16 16 ) 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 03 2C <!DefensiveCombatStim> 16 16 ) 16

    //if(iType == 60 || iType == 39)
    07 [@label001] 84 9A 01 <XGAbility.iType> 2C 3C 16 18 [@] ( 9A 01 <XGAbility.iType> 2C <%b 39> 16 16 )
       
	   //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.MIND_CONTROL_DIFFICULTY;
        A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> 00 ( 01 <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> ) 16
    
	[#label001]
    //if(iType == 40)
    07 [@label002] 9A 01 <XGAbility.iType> 2C 28 16 
		
		0F 00 <.iBonus> 93 19 01 <XGAbility.m_kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 01 2C <!OffensiveCombatStim> 16 16 ) 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 2C 07 16 ) 16
		//if(GetPrimaryTarget().GetCharacter().HasUpgrade(28))
		07 [@IfDamping] 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1C 16 ) 
			//iUIHitChance = 0;
			0F 48 <.iUIHitChance> 2C 00
			//iUICriticalChance = 0;
			0F 48 <.iUICriticalChance> 25 
			//return
			04 0B
		[#IfDamping]
	   //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.EXALT_LOOT3;
        A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.EXALT_LOOT3> 00 ( 01 <XGTacticalGameCoreNativeBase.EXALT_LOOT3> ) 16
        
		//if(GetPrimaryTarget().GetAppliedAbility(31) != none)
        //07 [@label002] 77 19 1B <GetPrimaryTarget> 16 [@] <XGUnitNativeBase.GetAppliedAbility.ReturnValue> 00 ( 1B <GetAppliedAbility> 2C 1F 16 ) 2A 16 
            //iBonus -= XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.40;
            //A2 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 2C 28 ) 16 
	[#label002]
    //if(GetPrimaryTarget().GetCharacter().HasUpgrade(28))
    //07 [@label003] 19 19 1B <GetPrimaryTarget> 16 [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1C 16 ) 
        //iBonus -= 20;
		//A2 00 <.iBonus> 2C 14 16 
    //[#label003]
    //if(m_kUnit.m_bInCombatDrugs)
    //07 [@label004] 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.m_bInCombatDrugs> 00 ( 2D 01 <XGUnitNativeBase.m_bInCombatDrugs> ) 
        //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.20;
        //A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 2C 14 ) 16 
    //[#label004]
    //if(m_kUnit.GetCharacter().HasUpgrade(156))
    //07 [@label005] 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 9C 16 ) 
        //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CalcInternationalWillBonus();
        //A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CalcInternationalWillBonus.ReturnValue> 00 ( 1B <CalcInternationalWillBonus> 16 ) 16 
    //[#label005]
    //if(m_kUnit.GetSquad().SquadHasStarOfTerra(true) && !XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CharacterHasProperty(m_kUnit.GetCharType(), 3))
    //07 [@label006] 82 19 19 01 <XGAbility.m_kUnit> [@] <XGUnit.GetSquad.ReturnValue> 00 ( 1B <GetSquad> 16 ) [@] <XGSquadNativeBase.SquadHasStarOfTerra.ReturnValue> 00 ( 1B <SquadHasStarOfTerra> 27 16 ) 18 [@] ( 81 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CharacterHasProperty.ReturnValue> 00 ( 1B <CharacterHasProperty> 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetCharType.ReturnValue> 00 ( 1B <GetCharType> 16 ) 2C 03 16 ) 16 16 ) 
        //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.TERRA_WILL;
       // A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.TERRA_WILL> 00 ( 01 <XGTacticalGameCoreNativeBase.TERRA_WILL> ) 16 
    //[#label006]
    //iBonus += (m_kUnit.GetBattleFatigueWillPenalty() + m_kUnit.GetFallenComradesWillPenalty());
    //A1 00 <.iBonus> 92 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetBattleFatigueWillPenalty.ReturnValue> 00 ( 1B <GetBattleFatigueWillPenalty> 16 ) 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.GetFallenComradesWillPenalty.ReturnValue> 00 ( 1B <GetFallenComradesWillPenalty> 16 ) 16 16 
    
	//iUICriticalChance = XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty;
    0F 48 <.iUICriticalChance> 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 
    //XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = 0;
    0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 2C 00 
    //iUIHitChance = m_kUnit.WillTestChance(0, iBonus, false, false, GetPrimaryTarget());
    0F 48 <.iUIHitChance> 19 01 <XGAbility.m_kUnit> [@] <XGUnitNativeBase.WillTestChance.ReturnValue> 00 ( 1B <WillTestChance> 25 00 <.iBonus> 28 28 1B <GetPrimaryTarget> 16 4A 4A 16 ) 
    //XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = iUICriticalChance;
    0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 48 <.iUICriticalChance> 
    //iUICriticalChance = 0;
    0F 48 <.iUICriticalChance> 25 
//else
06 [@label010] 
    [#label007]
    //if(HasProperty(46))
    07 [@label008] 1B <HasProperty> 24 2E 16 
        //iUIHitChance = GetScatterChance(VSize(m_kUnit.Location - m_vTargetLocation));
        0F 48 <.iUIHitChance> 1B <GetScatterChance> E1 D8 19 01 <XGAbility.m_kUnit> [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 01 <@m_vTargetLocation> 16 16 16 
        //iUICriticalChance = 0;
        0F 48 <.iUICriticalChance> 25 
    //else
    06 [@label010] 
        [#label008]
        //if(HasProperty(37))
        07 [@label009] 1B <HasProperty> 24 25 16 
            //iUIHitChance = GetHitChance();
            0F 48 <.iUIHitChance> 1B <GetHitChance> 16 
            //iUICriticalChance = 0;
            0F 48 <.iUICriticalChance> 25 
        //else
        06 [@label010] 
            [#label009]
            //iUIHitChance = GetHitChance();
            0F 48 <.iUIHitChance> 1B <GetHitChance> 16 
            //iUICriticalChance = GetCriticalChance();
            0F 48 <.iUICriticalChance> 1B <GetCriticalChance> 16 
        [#label010]
//return;
04 0B 
53 




OBJECT=UIUnitGermanMode_ShotInfo.UpdateDisplay:AUTO

[REPLACEMENT_CODE]
//critChance = "";
0F 00 <.critChance> 1F <%t ""> 
//hitChance = "";
0F 00 <.hitChance> 1F <%t ""> 
//shotName = "";
0F 00 <.shotName> 1F <%t ""> 
//kUnit = XComTacticalController(controllerRef).GetActiveUnit();
0F 00 <.kUnit> 19 2E <Class.XComTacticalController> 01 <UI_FxsPanel.controllerRef> [@] <XComTacticalController.GetActiveUnit.ReturnValue> 00 ( 1B <GetActiveUnit> 16 ) 
//kTargetingAction = XGAction_Targeting(kUnit.GetAction());
0F 00 <.kTargetingAction> 2E <Class.XGAction_Targeting> 19 00 <.kUnit> [@] <XGUnit.GetAction.ReturnValue> 00 ( 1B <GetAction> 16 ) 
//if(kTargetingAction == none)
07 [@label001] 72 00 <.kTargetingAction> 2A 16 
    //return;
    04 0B 
[#label001]
//kAbility = kTargetingAction.m_kShot;
0F 00 <.kAbility> 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) 
//kAbilityTarget = XGAbility_Targeted(kAbility);
0F 00 <.kAbilityTarget> 2E <Class.XGAbility_Targeted> 00 <.kAbility> 
//iHitChance = -1;
0F 00 <.iHitChance> 1D <%i -1> 
//iCriticalChance = -1;
0F 00 <.iCriticalChance> 1D <%i -1> 
//iNoCriticalChance = 0;
0F 00 <.iNoCriticalChance> 25 
//if((kTargetingAction != none) && kTargetingAction.m_kShot != none)
07 [@label009] 82 77 00 <.kTargetingAction> 2A 16 18 [@] ( 77 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) 2A 16 16 ) 
    //if(kAbility.HasProperty(33))
    07 [@label007] 19 00 <.kAbility> [@] <XGAbility.HasProperty.ReturnValue> 00 ( 1B <HasProperty> 24 21 16 ) 
        
		0F 00 <.iBonus> 93 19 00 <.kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 01 2C <!OffensiveCombatStim> 16 16 ) 19 19 00 <.kAbilityTarget> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 03 2C <!DefensiveCombatStim> 16 16 ) 16
		
		//if(kAbility.iType == 60 || kAbility.iType == 39)
        07 [@label002] 84 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 3C 16 18 [@] ( 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C <%b 39> 16 16 )
		
            //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.MIND_CONTROL_DIFFICULTY;
            A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> 00 ( 01 <XGTacticalGameCoreNativeBase.MIND_CONTROL_DIFFICULTY> ) 16
        [#label002]
        //if(kAbility.iType == 40)
        07 [@label003] 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 2C 28 16 
			
			0F 00 <.iBonus> 93 19 00 <.kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 9E 2C 01 2C <!OffensiveCombatStim> 16 16 ) 19 19 00 <.kAbilityTarget> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 2C 07 16 ) 16
			//if(kAbilityTarget.GetPrimaryTarget().GetCharacter().HasUpgrade(28))
			07 [@IfDampening] 19 19 19 00 <.kAbilityTarget> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 1C 16 ) 
				//iHitChance = 0;
				0F 00 <.iHitChance> 2C 00
				//iCriticalChance = 0;
				0F 00 <.iCriticalChance> 25 
				06 [@label009] 
			[#IfDampening]
			
            //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.EXALT_LOOT3;
            A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.EXALT_LOOT3> 00 ( 01 <XGTacticalGameCoreNativeBase.EXALT_LOOT3> ) 16
        [#label003]
        
		
		//if(kUnit.m_bInCombatDrugs)
        //07 [@label004] 19 00 <.kUnit> [@] <XGUnitNativeBase.m_bInCombatDrugs> 00 ( 2D 01 <XGUnitNativeBase.m_bInCombatDrugs> ) 
            //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.20;
            //A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 2C 14 ) 16 
        //[#label004]
        //if(kUnit.GetCharacter().HasUpgrade(156))
        //07 [@label005] 19 19 00 <.kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 9C 16 ) 
            //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CalcInternationalWillBonus();
            //A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CalcInternationalWillBonus.ReturnValue> 00 ( 1B <CalcInternationalWillBonus> 16 ) 16 
        //[#label005]
        //if(kUnit.GetSquad().SquadHasStarOfTerra(true) && !XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CharacterHasProperty(kUnit.GetCharType(), 3))
        //07 [@label006] 82 19 19 00 <.kUnit> [@] <XGUnit.GetSquad.ReturnValue> 00 ( 1B <GetSquad> 16 ) [@] <XGSquadNativeBase.SquadHasStarOfTerra.ReturnValue> 00 ( 1B <SquadHasStarOfTerra> 27 16 ) 18 [@] ( 81 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CharacterHasProperty.ReturnValue> 00 ( 1B <CharacterHasProperty> 19 00 <.kUnit> [@] <XGUnitNativeBase.GetCharType.ReturnValue> 00 ( 1B <GetCharType> 16 ) 2C 03 16 ) 16 16 ) 
            //iBonus += XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.TERRA_WILL;
            //A1 00 <.iBonus> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.TERRA_WILL> 00 ( 01 <XGTacticalGameCoreNativeBase.TERRA_WILL> ) 16 
        //[#label006]
        //iBonus += (kUnit.GetBattleFatigueWillPenalty() + kUnit.GetFallenComradesWillPenalty());
        //A1 00 <.iBonus> 92 19 00 <.kUnit> [@] <XGUnitNativeBase.GetBattleFatigueWillPenalty.ReturnValue> 00 ( 1B <GetBattleFatigueWillPenalty> 16 ) 19 00 <.kUnit> [@] <XGUnitNativeBase.GetFallenComradesWillPenalty.ReturnValue> 00 ( 1B <GetFallenComradesWillPenalty> 16 ) 16 16 
        
		//iCriticalChance = XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty;
        0F 00 <.iCriticalChance> 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 
        //XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = 0;
        0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 2C 00 
        //iHitChance = kUnit.WillTestChance(0, iBonus, false, false, kAbilityTarget.GetPrimaryTarget());
        0F 00 <.iHitChance> 19 00 <.kUnit> [@] <XGUnitNativeBase.WillTestChance.ReturnValue> 00 ( 1B <WillTestChance> 25 00 <.iBonus> 28 28 19 00 <.kAbilityTarget> [@] <XGAbility_Targeted.GetPrimaryTarget.ReturnValue> 00 ( 1B <GetPrimaryTarget> 16 ) 4A 4A 16 ) 
        //XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_kDesc.m_iDifficulty = iCriticalChance;
        0F 19 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_kDesc> 00 ( 01 <XGBattle.m_kDesc> ) [@] <XGBattleDesc.m_iDifficulty> 00 ( 01 <XGBattleDesc.m_iDifficulty> ) 00 <.iCriticalChance> 
        //iCriticalChance = 0;
        0F 00 <.iCriticalChance> 25 
    //else
    06 [@label009] 
        [#label007]
        //if(kAbility.HasProperty(46))
        07 [@label008] 19 00 <.kAbility> [@] <XGAbility.HasProperty.ReturnValue> 00 ( 1B <HasProperty> 24 2E 16 ) 
            //iHitChance = kTargetingAction.m_kShot.GetScatterChance(VSize(kTargetingAction.m_kShot.m_kUnit.Location - kTargetingAction.GetTargetLoc()));
            0F 00 <.iHitChance> 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.GetScatterChance.ReturnValue> 00 ( 1B <GetScatterChance> E1 D8 19 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <Engine.Actor.Location> 00 ( 01 <Engine.Actor.Location> ) 19 00 <.kTargetingAction> [@] <XGAction_Targeting.GetTargetLoc.ReturnValue> 00 ( 1B <GetTargetLoc> 16 ) 16 16 16 ) 
            //iCriticalChance = 0;
            0F 00 <.iCriticalChance> 25 
        //else
        06 [@label009] 
            [#label008]
            //iHitChance = kTargetingAction.m_kShot.GetHitChance();
            0F 00 <.iHitChance> 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.GetHitChance.ReturnValue> 00 ( 1B <GetHitChance> 16 ) 
            //iCriticalChance = kTargetingAction.m_kShot.GetCriticalChance();
            0F 00 <.iCriticalChance> 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.GetCriticalChance.ReturnValue> 00 ( 1B <GetCriticalChance> 16 ) 
        [#label009]
//if((kAbility == none) || kAbilityTarget == none)
07 [@label010] 84 72 00 <.kAbility> 2A 16 18 [@] ( 72 00 <.kAbilityTarget> 2A 16 16 ) 
    //AS_SetShotInfo("", "", "", "", "");
    1B <AS_SetShotInfo> 1F <%t ""> 1F <%t ""> 1F <%t ""> 1F <%t ""> 1F <%t ""> 16 
//else
06 [@label016] 
    [#label010]
    //kAbilityTarget.GetShotSummary(kResult, kInfo);
    19 00 <.kAbilityTarget> [@] <NullRef> 00 ( 1B <GetShotSummary> 00 <.kResult> 00 <.kInfo> 16 ) 
    //ProcessModifiers(kInfo.arrHitBonusStrings, kInfo.arrHitBonusValues, false);
    1C <@ProcessModifiers> 35 <XGAbility_Targeted.TShotInfo.arrHitBonusStrings> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 35 <XGAbility_Targeted.TShotInfo.arrHitBonusValues> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 28 16 
    //ProcessModifiers(kInfo.arrHitPenaltyStrings, kInfo.arrHitPenaltyValues, false);
    1C <@ProcessModifiers> 35 <XGAbility_Targeted.TShotInfo.arrHitPenaltyStrings> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 35 <XGAbility_Targeted.TShotInfo.arrHitPenaltyValues> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 28 16 
    //ProcessModifiers(kInfo.arrCritBonusStrings, kInfo.arrCritBonusValues, true);
    1C <@ProcessModifiers> 35 <XGAbility_Targeted.TShotInfo.arrCritBonusStrings> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 35 <XGAbility_Targeted.TShotInfo.arrCritBonusValues> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 27 16 
    //ProcessModifiers(kInfo.arrCritPenaltyStrings, kInfo.arrCritPenaltyValues, true);
    1C <@ProcessModifiers> 35 <XGAbility_Targeted.TShotInfo.arrCritPenaltyStrings> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 35 <XGAbility_Targeted.TShotInfo.arrCritPenaltyValues> <XGAbility_Targeted.TShotInfo> 00 00 00 <.kInfo> 27 16 
    //if((iCriticalChance > 0) && kTargetingAction.m_kShot.ShouldShowCritPercentage())
    07 [@label011] 82 97 00 <.iCriticalChance> 25 16 18 [@] ( 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.ShouldShowCritPercentage.ReturnValue> 00 ( 1B <ShouldShowCritPercentage> 16 ) 16 ) 
        //critChance = string(iCriticalChance) $ "%";
        0F 00 <.critChance> 70 38 53 00 <.iCriticalChance> 1F <%t "%"> 16 
    //else
    06 [@label012] 
        [#label011]
        //if(kTargetingAction.m_kShot.ShouldShowCritPercentage())
        07 [@label012] 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.ShouldShowCritPercentage.ReturnValue> 00 ( 1B <ShouldShowCritPercentage> 16 ) 
            //critChance = string(iNoCriticalChance) $ "%";
            0F 00 <.critChance> 70 38 53 00 <.iNoCriticalChance> 1F <%t "%"> 16 
        [#label012]
    //if(XComPresentationLayer(controllerRef.m_Pres).GetTacticalHUD().m_kAbilityHUD.CheckForAvailability(kAbility))
    07 [@label014] 19 19 19 2E <Class.XComPresentationLayer> 19 01 <UI_FxsPanel.controllerRef> [@] <XComPlayerController.m_Pres> 00 ( 01 <XComPlayerController.m_Pres> ) [@] <XComPresentationLayer.GetTacticalHUD.ReturnValue> 00 ( 1B <GetTacticalHUD> 16 ) [@] <UITacticalHUD.m_kAbilityHUD> 00 ( 01 <UITacticalHUD.m_kAbilityHUD> ) [@] <UITacticalHUD_AbilityContainer.CheckForAvailability.ReturnValue> 00 ( 1B <CheckForAvailability> 00 <.kAbility> 16 ) 
        //if((iHitChance > -1) && kTargetingAction.m_kShot.ShouldShowPercentage())
        07 [@label013] 82 97 00 <.iHitChance> 1D <%i -1> 16 18 [@] ( 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.ShouldShowPercentage.ReturnValue> 00 ( 1B <ShouldShowPercentage> 16 ) 16 ) 
            //hitChance = string(iHitChance) $ "%";
            0F 00 <.hitChance> 70 38 53 00 <.iHitChance> 1F <%t "%"> 16 
        [#label013]
        //shotName = kAbility.GetName();
        0F 00 <.shotName> 19 00 <.kAbility> [@] <XGAbility.GetName.ReturnValue> 00 ( 1B <GetName> 16 ) 
    [#label014]
    //if((iHitChance > -1) && kTargetingAction.m_kShot.ShouldShowPercentage())
    07 [@label015] 82 97 00 <.iHitChance> 1D <%i -1> 16 18 [@] ( 19 19 00 <.kTargetingAction> [@] <XGAction_Targeting.m_kShot> 00 ( 01 <XGAction_Targeting.m_kShot> ) [@] <XGAbility_Targeted.ShouldShowPercentage.ReturnValue> 00 ( 1B <ShouldShowPercentage> 16 ) 16 ) 
        //AS_SetShotInfo(Caps(shotName), hitChance, m_sShotChanceLabel, critChance, m_sCriticalLabel);
        1B <AS_SetShotInfo> EB 00 <.shotName> 16 00 <.hitChance> 01 <@m_sShotChanceLabel> 00 <.critChance> 01 <@m_sCriticalLabel> 16 
    //else
    06 [@label016] 
        [#label015]
        //AS_SetShotInfo("", "", "", "", "");
        1B <AS_SetShotInfo> 1F <%t ""> 1F <%t ""> 1F <%t ""> 1F <%t ""> 1F <%t ""> 16 
    [#label016]
//return;
04 0B 
53 



OBJECT=XGAction_Targeting.SetChainedDistance:AUTO

[REPLACEMENT_CODE]
//if(!AbilityRequiresChainedDistance(eInputAbilityType) && eInputAbilityType != 14)
0B 
07 [@label001] 82 81 1B <AbilityRequiresChainedDistance> 00 <.eInputAbilityType> 16 16 18 [@] ( 9B 38 3A 00 <.eInputAbilityType> 2C 0E 16 16 ) 
    //return false;
    04 28 
[#label001]
//fMinDistance = float(0);
0F 48 <.fMinDistance> 38 3F 25 
//switch(eInputAbilityType)
05 <.eInputAbilityType> 00 00 <.eInputAbilityType> 
    //case 15:
    0A [@label002] 24 0F 
        //tempTWeapon = 83;
        0F 00 <.tempTWeapon> 2C 53 
		//break;
        06 [@label014] 
    [#label002]
    //case 16:
    0A [@label003] 24 10 
        //tempTWeapon = 81;
        0F 00 <.tempTWeapon> 2C 51 
		//break;
        06 [@label014] 
    [#label003]
    //case 17:
    0A [@label004] 24 11 
        //tempTWeapon = 82;
        0F 00 <.tempTWeapon> 2C 52 
		//break;
        06 [@label014] 
    [#label004]
    //case 18:
    0A [@label005] 24 12 
        //tempTWeapon = 84;
        0F 00 <.tempTWeapon> 2C 54 
		//break;
        06 [@label014] 
    [#label005]
    //case 56:
    0A [@label006] 24 38 
        //tempTWeapon = 97;
        0F 00 <.tempTWeapon> 2C 61 
		//break;
        06 [@label014] 
    [#label006]
    //case 76:
    0A [@label007] 24 4C 
        //tempTWeapon = 86;
        0F 00 <.tempTWeapon> 2C 56 
		//break;
        06 [@label014] 
    [#label007]
    //case 77:
    0A [@label008] 24 4D 
        //tempTWeapon = 85;
        0F 00 <.tempTWeapon> 2C 55 
		//break;
        06 [@label014] 
    [#label008]
    //case 79:
    0A [@label009] 24 4F 
        //tempTWeapon = 87;
        0F 00 <.tempTWeapon> 2C 57 
		//break;
        06 [@label014] 
    [#label009]
    //case 82:
    0A [@label010] 24 52 
        //tempTWeapon = 27;
        0F 00 <.tempTWeapon> 2C 1B 
		//break;
        06 [@label014] 
    [#label010]
    //case 86:
    0A [@label011] 24 56 
        //tempTWeapon = 24;
        0F 00 <.tempTWeapon> 2C 18 
		//break;
        06 [@label014] 
    [#label011]
    //case 24:
    0A [@label012] 24 18 
        //tempTWeapon = 54;
        0F 00 <.tempTWeapon> 2C 36 
		//break;
        06 [@label014] 
    [#label012]
    //case 75:
    0A [@label013] 24 4B 
        //tempTWeapon = 88;
        0F 00 <.tempTWeapon> 2C 58 
		//break;
        06 [@label014] 
    [#label013]
    //default:
    0A FF FF 
        //break;
        06 [@label014] 
    [#label014]
//if(tempTWeapon != 0)
07 [@label015] 9B 00 <.tempTWeapon> 25 16 
	//fMinDistance = float(m_kUnit.GetMoveModifierCost(tempTWeapon, 0));
    0F 48 <.fMinDistance> 38 3F 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetMoveModifierCost.ReturnValue> 00 ( 1B <GetMoveModifierCost> 00 <.tempTWeapon> 25 16 ) 
[#label015]
//if(fMinDistance <= float(1))
07 [@label029] B2 48 <.fMinDistance> 38 3F 26 16 
    //switch(eInputAbilityType)
    05 <.eInputAbilityType> 00 00 <.eInputAbilityType> 
        //case 84:
        0A [@label016] 24 54 
            //fMinDistance = float(1728);
            0F 48 <.fMinDistance> 38 3F 1D <%i 1728> 
            //break;
            06 [@label029] 
        [#label016]
        //case 58:
        0A [@label017] 24 3A 
            //fMinDistance = float(6400);
            0F 48 <.fMinDistance> 38 3F 1D <%i 6400> 
            //break;
            06 [@label029] 
        [#label017]
        //case 61:
        0A [@label018] 24 3D 
    [#label018]
        //case 59:
        0A [@label019] 24 3B 
    [#label019]
        //case 14:
        0A [@label020] 24 0E 
    [#label020]
        //case 23:
        0A [@label021] 24 17 
		
            //fMinDistance = float(27 * 64) * (float(1) - (float(28) / (float(28) + float(m_kUnit.RecordMoraleLoss()))));
            0F 48 <.fMinDistance> AB 38 3F 90 2C 1B 2C 40 16 AF 38 3F 2C 01 AC 38 3F 2C 1C AE 38 3F 2C 1C 38 3F 19 01 <XGAction.m_kUnit> [@] <XGUnit.RecordMoraleLoss.ReturnValue> 00 ( 1B <RecordMoraleLoss> 4A 16 ) 16 16 16 16 
			
            //break;
            06 [@label029] 
        [#label021]
        //case 19:
        0A [@label022] 24 13 
    [#label022]
        //case 52:
        0A [@label028] 24 34 
            //fMinDistance = XGWeapon(m_kUnit.GetInventory().GetPrimaryItemInSlot(2)).LongRange();
            0F 48 <.fMinDistance> 19 2E <Class.XGWeapon> 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventoryNativeBase.GetPrimaryItemInSlot.ReturnValue> 00 ( 1B <GetPrimaryItemInSlot> 24 02 16 ) [@] <XGWeapon.LongRange.ReturnValue> 00 ( 1B <LongRange> 16 ) 
            //if(m_kUnit.GetInventory().HasItemOfType(19))
            07 [@label024] 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventory.HasItemOfType.ReturnValue> 00 ( 1B <HasItemOfType> 24 13 16 ) 
                //fMinDistance += float((64 * (m_kUnit.GetOffense() - 65)) / 4);
                B8 48 <.fMinDistance> 38 3F 91 90 2C 40 93 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetOffense.ReturnValue> 00 ( 1B <GetOffense> 16 ) 2C 41 16 16 2C 04 16 16 
                //if(m_kUnit.m_iMovesActionsPerformed == 0)
                07 [@label024] 9A 19 01 <XGAction.m_kUnit> [@] <XGUnitNativeBase.m_iMovesActionsPerformed> 00 ( 01 <XGUnitNativeBase.m_iMovesActionsPerformed> ) 25 16 
                    //if(m_kUnit.GetCharacter().HasUpgrade(114))
                    07 [@label023] 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 72 16 ) 
                        //fMinDistance += float((10 * 64) / 4);
                        B8 48 <.fMinDistance> 38 3F 91 90 2C 0A 2C 40 16 2C 04 16 16 
                    [#label023]
                    //if(m_kUnit.GetCharacter().HasUpgrade(141))
                    07 [@label024] 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 8D 16 ) 
                        //fMinDistance += float((10 * 64) / 4);
                        B8 48 <.fMinDistance> 38 3F 91 90 2C 0A 2C 40 16 2C 04 16 16 
                    [#label024]
            //if(m_kUnit.GetCharacter().HasUpgrade(66))
            07 [@label025] 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 42 16 ) 
                //fMinDistance *= 1.250;
                B6 48 <.fMinDistance> 1E <%f 1.25> 16 
            [#label025]
            //if(m_kUnit.m_iMovesActionsPerformed > 0)
            07 [@label027] 97 19 01 <XGAction.m_kUnit> [@] <XGUnitNativeBase.m_iMovesActionsPerformed> 00 ( 01 <XGUnitNativeBase.m_iMovesActionsPerformed> ) 25 16 
                //if(m_kUnit.GetCharacter().HasUpgrade(16))
                07 [@label026] 19 19 01 <XGAction.m_kUnit> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.HasUpgrade.ReturnValue> 00 ( 1B <HasUpgrade> 2C 10 16 ) 
                    //fMinDistance *= 0.750;
                    B6 48 <.fMinDistance> 1E <%f 0.75> 16 
                //else
                06 [@label027] 
                    [#label026]
                    //fMinDistance *= 0.50;
                    B6 48 <.fMinDistance> 1E <%f 0.5> 16 
                [#label027]
            //break;
            06 [@label029] 
        [#label028]
        //default:
        0A FF FF 
            //break;
            06 [@label029] 
        [#label029]
//if(fMinDistance > float(1))
07 [@label030] B1 48 <.fMinDistance> 38 3F 26 16 
    //m_kCursor.m_fMaxChainedDistance = fMinDistance;
    0F 19 01 <XGAction.m_kCursor> [@] <XCom3DCursor.m_fMaxChainedDistance> 00 ( 01 <XCom3DCursor.m_fMaxChainedDistance> ) 48 <.fMinDistance> 
    //fMinDistance = float(1);
    0F 48 <.fMinDistance> 38 3F 26 
    //return true;
    04 27 
[#label030]
//fMinDistance = float(1);
0F 48 <.fMinDistance> 38 3F 26 
//return false;
04 28 
//return ReturnValue;
04 3A <.ReturnValue> 
53 


OBJECT=XGUnit.ClearAffectingAbilityFromSelf:AUTO

[REPLACEMENT_CODE]
//E7 1F <%t "Test! ClearAffectingAbilityFromSelf"> 2A 16
//CleanUpAbilitiesAffecting();
1B <CleanUpAbilitiesAffecting> 4A 16 
//iAbility = 0;
0F 00 <.iAbility> 25 
[#label001]
//if(iAbility < m_iNumAbilitiesAffecting) [Loop If]
07 [@label003] 96 00 <.iAbility> 01 <XGUnitNativeBase.m_iNumAbilitiesAffecting> 16 
    //kAbility = m_aAbilitiesAffecting[iAbility];
    0F 00 <.kAbility> 1A 00 <.iAbility> 01 <XGUnitNativeBase.m_aAbilitiesAffecting> 
	
	07 [@IfPsiPanic] 9A 00 <.iAbilityType> 2C <%b 40> 16 
		19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <NullRef> 00 ( 1B <ClearAppliedAbility> 2C <%b 40> 16 ) 
	[#IfPsiPanic]
	
    //if(kAbility.iType == iAbilityType)
    07 [@label002] 9A 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 00 <.iAbilityType> 16 
	
		//E7 70 70 1F <%t "Test! ClearAffectingAbilityFromSelf: Ability = "> 38 53 19 00 <.kAbility> [@] <XGAbility.iType> 00 ( 01 <XGAbility.iType> ) 16 70 1F <%t " Unit = "> 19 19 00 <.kAbility> [@] <XGAbility.m_kUnit> 00 ( 01 <XGAbility.m_kUnit> ) [@] <XGUnitNativeBase.SafeGetCharacterName.ReturnValue> 00 ( 1B <SafeGetCharacterName> 16 ) 16 16 2A 16
		
        //arrRemove.AddItem(kAbility);
        55 00 <.arrRemove> [@] ( 00 <.kAbility> 16 ) 
    [#label002]
    //++ iAbility;
    A5 00 <.iAbility> 16 
    //goto J0x16; [Loop Continue]
    06 [@label001] 
[#label003]
//foreach arrRemove(kAbility,)
58 00 <.arrRemove> 00 <.kAbility> 00 4A [@label007] 
    //I = 0;
    0F 00 <.I> 25 
[#label004]
    //if(I < 16) [Loop If]
    07 [@label006] 96 00 <.I> 2C 10 16 
        //if(kAbility.m_aTargets[I].m_kTarget == self)
        07 [@label005] 72 35 <XGAbility_Targeted.TUnitTarget.m_kTarget> <XGAbility_Targeted.TUnitTarget> 00 00 1A 00 <.I> 19 00 <.kAbility> [@] <XGAbility_Targeted.m_aTargets> 00 ( 01 <XGAbility_Targeted.m_aTargets> ) 17 16 
            //kAbility.RemoveAbilityFromTarget(kAbility.m_aTargets[I]);
            19 00 <.kAbility> [@] <NullRef> 00 ( 1C <XGAbility_Targeted.RemoveAbilityFromTarget> 1A 00 <.I> 19 00 <.kAbility> [@] <XGAbility_Targeted.m_aTargets> 00 ( 01 <XGAbility_Targeted.m_aTargets> ) 16 ) 
            //kAbility.RemoveEffectsFromTarget(kAbility.m_aTargets[I]);
            19 00 <.kAbility> [@] <NullRef> 00 ( 1C <XGAbility_Targeted.RemoveEffectsFromTarget> 1A 00 <.I> 19 00 <.kAbility> [@] <XGAbility_Targeted.m_aTargets> 00 ( 01 <XGAbility_Targeted.m_aTargets> ) 16 ) 
            //kAbility.m_aTargets[I].m_kTarget = none;
            0F 35 <XGAbility_Targeted.TUnitTarget.m_kTarget> <XGAbility_Targeted.TUnitTarget> 00 01 1A 00 <.I> 19 00 <.kAbility> [@] <XGAbility_Targeted.m_aTargets> 00 ( 01 <XGAbility_Targeted.m_aTargets> ) 2A 
            //continue;
            06 [@label006] 
        [#label005]
        //++ I;
        A5 00 <.I> 16 
        //goto J0xBC; [Loop Continue]
        06 [@label004] 
    [#label006]
        31 
    [#label007]
        30 
//return;
04 0B 
53 

OBJECT=XGUnit.OnDeath:AUTO

[REPLACEMENT_CODE]
//TriggerGlobalEventClass(class'SeqEvent_OnUnitKilled', self, 0);
1B <TriggerGlobalEventClass> 20 <Class.SeqEvent_OnUnitKilled> 17 25 16 
//UnitSpeak(40, true);
1B <UnitSpeak> 24 28 27 16 
//if(IsATank())
07 [@label001] 1B <IsATank> 16 
    //PRES().MSGTankDied(self);
    19 1B <PRES> 16 [@] <NullRef> 00 ( 1B <MSGTankDied> 17 16 ) 
//else
06 [@label003] 
    [#label001]
    //if(GetCharacter().IsA('XGCharacter_Soldier'))
    07 [@label002] 19 1B <GetCharacter> 16 [@] <Core.Object.IsA.ReturnValue> 00 ( C5 21 <XGCharacter_Soldier> 16 ) 
        //PRES().MSGSoldierDied(self);
        19 1B <PRES> 16 [@] <NullRef> 00 ( 1B <MSGSoldierDied> 17 16 ) 
    //else
    06 [@label003] 
        [#label002]
        //if(XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.IsA('XGBattle_MP'))
        07 [@label003] 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <Core.Object.IsA.ReturnValue> 00 ( C5 21 <XGBattle_MP> 16 ) 
            //PRES().MSGSoldierDied(self);
            19 1B <PRES> 16 [@] <NullRef> 00 ( 1B <MSGSoldierDied> 17 16 ) 
        [#label003]
//if(m_kBehavior != none)
07 [@label004] 77 01 <XGUnitNativeBase.m_kBehavior> 2A 16 
    //m_kBehavior.OnDeath(kDamageDealer);
    19 01 <XGUnitNativeBase.m_kBehavior> [@] <NullRef> 00 ( 1B <OnDeath> 00 <.kDamageDealer> 16 ) 
[#label004]
//I = 0;
0F 00 <.I> 25 
[#label005]
//if(I < XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_iNumPlayers) [Loop If]
07 [@label006] 96 00 <.I> 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_iNumPlayers> 00 ( 01 <XGBattle.m_iNumPlayers> ) 16 
    //PlayerToNotify = XComTacticalGRI(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kBattle.m_arrPlayers[I];
    0F 00 <.PlayerToNotify> 1A 00 <.I> 19 19 2E <Class.XComTacticalGRI> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComTacticalGRI.m_kBattle> 00 ( 01 <XComTacticalGRI.m_kBattle> ) [@] <XGBattle.m_arrPlayers> 00 ( 01 <XGBattle.m_arrPlayers> ) 
    //PlayerToNotify.OnUnitKilled(self, kDamageDealer);
    19 00 <.PlayerToNotify> [@] <NullRef> 00 ( 1B <OnUnitKilled> 17 00 <.kDamageDealer> 16 ) 
    //++ I;
    A3 00 <.I> 16 
    //goto J0x16A; [Loop Continue]
    06 [@label005] 
[#label006]
//if(m_bInCover)
07 [@label007] 2D 01 <XGUnitNativeBase.m_bInCover> 
    //HideCoverIcon();
    1B <HideCoverIcon> 16 
[#label007]
//if(!PRES().false)
07 [@label008] 81 19 1B <PRES> 16 [@] <XGUnit.PRES.ReturnValue> 00 ( 28 ) 16 
    //m_kDiscMesh.SetHidden(true);
    19 01 <@m_kDiscMesh> [@] <NullRef> 00 ( 1C <Engine.PrimitiveComponent.SetHidden> 27 16 ) 
[#label008]
//DebugVisibilityForSelf();
1B <DebugVisibilityForSelf> 16 
//ClearSuppressingEnemies();
1B <ClearSuppressingEnemies> 16 
//m_aCurrentStats[7] = m_kCharacter.GetCharMaxStat(7) + m_aInventoryStats[7];
0F 1A 2C 07 01 <XGUnitNativeBase.m_aCurrentStats> 92 19 01 <XGUnitNativeBase.m_kCharacter> [@] <XGCharacter.GetCharMaxStat.ReturnValue> 00 ( 1B <GetCharMaxStat> 24 07 16 ) 1A 2C 07 01 <XGUnitNativeBase.m_aInventoryStats> 16 
		
07 [@IfIsAlien] 82 82 1B <IsAlien_CheckByCharType> 16 18 [@] ( 19 1B <GetPlayer> 16 [@] <XGPlayerNativeBase.IsHumanPlayer.ReturnValue> 00 ( 1B <IsHumanPlayer> 16 ) 16 ) 18 [@] ( 9B 19 19 1B <GetPlayer> 16 [@] <XGPlayer.GetSquad.ReturnValue> 00 ( 1B <GetSquad> 16 ) [@] <XGSquad.GetIndex.ReturnValue> 00 ( 1B <GetIndex> 17 16 ) 1D <%i -1> 16 16 )
	//E7 1F <%t "Test! XGUnit.OnDeath: Remove"> 2A 16
	//GetSquad().RemoveUnit(self);
	19 1B <GetSquad> 16 [@] <NullRef> 00 ( 1B <RemoveUnit> 17 16 ) 
[#IfIsAlien]
		
//I = 0;
0F 00 <.I> 25 
[#label009]
//if(I < GetSquad().GetNumMembers()) [Loop If]
07 [@label011] 96 00 <.I> 19 1B <GetSquad> 16 [@] <XGSquadNativeBase.GetNumMembers.ReturnValue> 00 ( 1B <GetNumMembers> 16 ) 16 
	//if((GetSquad().GetMemberAt(I) == self) || !GetSquad().GetMemberAt(I).IsAliveAndWell())
    07 [@label010] 84 72 19 1B <GetSquad> 16 [@] <XGSquadNativeBase.GetMemberAt.ReturnValue> 00 ( 1B <GetMemberAt> 00 <.I> 16 ) 17 16 18 [@] ( 81 19 19 1B <GetSquad> 16 [@] <XGSquadNativeBase.GetMemberAt.ReturnValue> 00 ( 1B <GetMemberAt> 00 <.I> 16 ) [@] <XGUnitNativeBase.IsAliveAndWell.ReturnValue> 00 ( 1B <IsAliveAndWell> 4A 16 ) 16 16 ) 
	//else
    06 [@label010] 
        [#label010]
    //++ I;
    A5 00 <.I> 16 
    //goto J0x33F; [Loop Continue]
    06 [@label009] 
[#label011]
//ClearFlankers();
1C <XGUnitNativeBase.ClearFlankers> 16 
//if(!IsExalt())
07 [@label012] 81 1B <IsExalt> 16 16 
    //m_bStunned = false;
    14 2D 01 <XGUnitNativeBase.m_bStunned> 28 
[#label012]
//m_bIsFlying = false;
14 2D 01 <XGUnitNativeBase.m_bIsFlying> 28 
//if(m_kFlyingRing.HiddenGame == false)
07 [@label013] F2 19 01 <@m_kFlyingRing> [@] <Engine.PrimitiveComponent.HiddenGame> 00 ( 2D 01 <Engine.PrimitiveComponent.HiddenGame> ) 28 16 
    //m_kFlyingRing.SetHidden(true);
    19 01 <@m_kFlyingRing> [@] <NullRef> 00 ( 1C <Engine.PrimitiveComponent.SetHidden> 27 16 ) 
[#label013]
//if(!IsActiveUnit())
07 [@label014] 81 1B <IsActiveUnit> 16 16 
    //GotoState('Dead');
    71 21 <Dead> 4A 4A 4A 16 
[#label014]
//if(IsHiding())
07 [@label015] 1B <IsHiding> 4A 16 
    //SetHiding(false);
    1B <SetHiding> 28 16 
    //GetPawn().SetGhostFX(false);
    19 1B <GetPawn> 16 [@] <XComUnitPawn.SetGhostFX.ReturnValue> 00 ( 1B <SetGhostFX> 28 16 ) 
[#label015]
//if(ClassIsChildOf(DamageType, class'XComDamageType_Explosion') || ClassIsChildOf(DamageType, class'XComDamageType_Flame'))
07 [@label016] 84 61 02 00 <.DamageType> 20 <Class.XComDamageType_Explosion> 16 18 [@] ( 61 02 00 <.DamageType> 20 <Class.XComDamageType_Flame> 16 16 ) 
    //m_bWasKilledByExplosion = true;
    14 2D 01 <@m_bWasKilledByExplosion> 27 
[#label016]
//if(kDamageDealer.GetCharacter().m_kChar.iType == 2)
07 [@label017] 9A 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 00 <.kDamageDealer> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 02 16 
    //m_strCauseOfDeath = ((XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetLocalizedItemName(kDamageDealer.GetInventory().GetActiveWeapon().GameplayType()) @ "(") $ kDamageDealer.SafeGetCharacterName()) $ ")";
    0F 01 <@m_strCauseOfDeath> 70 70 A8 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetLocalizedItemName.ReturnValue> 00 ( 1B <GetLocalizedItemName> 19 19 19 00 <.kDamageDealer> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventoryNativeBase.GetActiveWeapon.ReturnValue> 00 ( 1B <GetActiveWeapon> 16 ) [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <GameplayType> 16 ) 16 ) 1F <%t "("> 16 19 00 <.kDamageDealer> [@] <XGUnitNativeBase.SafeGetCharacterName.ReturnValue> 00 ( 1B <SafeGetCharacterName> 16 ) 16 1F <%t ")"> 16 
//else
06 [@label023] 
    [#label017]
    //if(((kDamageDealer != none) && kDamageDealer.GetInventory() != none) && kDamageDealer.GetInventory().GetActiveWeapon() != none)
    07 [@label022] 82 82 77 00 <.kDamageDealer> 2A 16 18 [@] ( 77 19 00 <.kDamageDealer> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) 2A 16 16 ) 18 [@] ( 77 19 19 00 <.kDamageDealer> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventoryNativeBase.GetActiveWeapon.ReturnValue> 00 ( 1B <GetActiveWeapon> 16 ) 2A 16 16 ) 
        //switch(kDamageDealer.GetCharacter().m_kChar.iType)
        05 <XGTacticalGameCoreNativeBase.TCharacter.iType> 00 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 00 <.kDamageDealer> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 
            //case 23:
            0A [@label020] 2C 17 
                //if(m_kPawn.DamageEvent_CauseOfDeath.DamageType == class'XComDamageType_Strangled')
                07 [@label018] 72 35 <Engine.Actor.DamageEvent.DamageType> <Engine.Actor.DamageEvent> 00 00 19 01 <XGUnitNativeBase.m_kPawn> [@] <XComUnitPawnNativeBase.DamageEvent_CauseOfDeath> 00 ( 01 <XComUnitPawnNativeBase.DamageEvent_CauseOfDeath> ) 20 <Class.XComDamageType_Strangled> 16 
                    //m_strCauseOfDeath = ((XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetLocalizedItemName(56) @ "(") $ class'UIFxsLocalizationHelper'.static.GetAlienDisplayName(byte(kDamageDealer.GetCharacter().m_kChar.iType))) $ ")";
                    0F 01 <@m_strCauseOfDeath> 70 70 A8 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetLocalizedItemName.ReturnValue> 00 ( 1B <GetLocalizedItemName> 24 38 16 ) 1F <%t "("> 16 12 20 <Class.UIFxsLocalizationHelper> [@] <UIFxsLocalizationHelper.GetAlienDisplayName.ReturnValue> 00 ( 1B <GetAlienDisplayName> 38 3D 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 00 <.kDamageDealer> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 16 ) 16 1F <%t ")"> 16 
                //else
                06 [@label019] 
                    [#label018]
                    //m_strCauseOfDeath = ((XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetLocalizedItemName(kDamageDealer.GetInventory().GetActiveWeapon().GameplayType()) @ "(") $ class'UIFxsLocalizationHelper'.static.GetAlienDisplayName(byte(kDamageDealer.GetCharacter().m_kChar.iType))) $ ")";
                    0F 01 <@m_strCauseOfDeath> 70 70 A8 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetLocalizedItemName.ReturnValue> 00 ( 1B <GetLocalizedItemName> 19 19 19 00 <.kDamageDealer> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventoryNativeBase.GetActiveWeapon.ReturnValue> 00 ( 1B <GetActiveWeapon> 16 ) [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <GameplayType> 16 ) 16 ) 1F <%t "("> 16 12 20 <Class.UIFxsLocalizationHelper> [@] <UIFxsLocalizationHelper.GetAlienDisplayName.ReturnValue> 00 ( 1B <GetAlienDisplayName> 38 3D 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 00 <.kDamageDealer> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 16 ) 16 1F <%t ")"> 16 
                [#label019]
                //break;
                06 [@label021] 
            [#label020]
            //default:
            0A FF FF 
                //m_strCauseOfDeath = ((XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetLocalizedItemName(kDamageDealer.GetInventory().GetActiveWeapon().GameplayType()) @ "(") $ class'UIFxsLocalizationHelper'.static.GetAlienDisplayName(byte(kDamageDealer.GetCharacter().m_kChar.iType))) $ ")";
                0F 01 <@m_strCauseOfDeath> 70 70 A8 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetLocalizedItemName.ReturnValue> 00 ( 1B <GetLocalizedItemName> 19 19 19 00 <.kDamageDealer> [@] <XGUnit.GetInventory.ReturnValue> 00 ( 1B <GetInventory> 16 ) [@] <XGInventoryNativeBase.GetActiveWeapon.ReturnValue> 00 ( 1B <GetActiveWeapon> 16 ) [@] <XGItem.GameplayType.ReturnValue> 00 ( 1B <GameplayType> 16 ) 16 ) 1F <%t "("> 16 12 20 <Class.UIFxsLocalizationHelper> [@] <UIFxsLocalizationHelper.GetAlienDisplayName.ReturnValue> 00 ( 1B <GetAlienDisplayName> 38 3D 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 19 00 <.kDamageDealer> [@] <XGUnit.GetCharacter.ReturnValue> 00 ( 1B <GetCharacter> 16 ) [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 16 ) 16 1F <%t ")"> 16 
                //break;
                06 [@label021] 
            [#label021]
    //else
    06 [@label023] 
        [#label022]
        //m_strCauseOfDeath = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.UnknownCauseOfDeathString;
        0F 01 <@m_strCauseOfDeath> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.UnknownCauseOfDeathString> 00 ( 01 <XGTacticalGameCore.UnknownCauseOfDeathString> ) 
    [#label023]
//if(XComUnitPawn(m_kPawn).m_bTutorialCanDieInMatinee)
07 [@label024] 19 2E <Class.XComUnitPawn> 01 <XGUnitNativeBase.m_kPawn> [@] <XComUnitPawn.m_bTutorialCanDieInMatinee> 00 ( 2D 01 <XComUnitPawn.m_bTutorialCanDieInMatinee> ) 
    //m_strCauseOfDeath = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.GetLocalizedItemName(4);
    0F 01 <@m_strCauseOfDeath> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCore.GetLocalizedItemName.ReturnValue> 00 ( 1B <GetLocalizedItemName> 24 04 16 ) 
[#label024]
//CheckForDamagedItems();
1B <CheckForDamagedItems> 16 
//if(m_kForceConstantCombatTarget != none)
07 [@label025] 77 01 <@m_kForceConstantCombatTarget> 2A 16 
    //m_kForceConstantCombatTarget.m_kConstantCombatUnitTargettingMe = none;
    0F 19 01 <@m_kForceConstantCombatTarget> [@] <XGUnitNativeBase.m_kConstantCombatUnitTargettingMe> 00 ( 01 <XGUnitNativeBase.m_kConstantCombatUnitTargettingMe> ) 2A 
[#label025]
//if(m_kConstantCombatUnitTargettingMe != none)
07 [@label026] 77 01 <XGUnitNativeBase.m_kConstantCombatUnitTargettingMe> 2A 16 
    //m_kConstantCombatUnitTargettingMe.ConstantCombatSuppress(false, none);
    19 01 <XGUnitNativeBase.m_kConstantCombatUnitTargettingMe> [@] <NullRef> 00 ( 1B <ConstantCombatSuppress> 28 2A 16 ) 
    //m_kConstantCombatUnitTargettingMe = none;
    0F 01 <XGUnitNativeBase.m_kConstantCombatUnitTargettingMe> 2A 
[#label026]
//ClearAbilitiesOnDeath(false);
1B <ClearAbilitiesOnDeath> 28 16 
//SurvivingUnit = GetSquad().GetNextGoodMember();
0F 00 <.SurvivingUnit> 19 1B <GetSquad> 16 [@] <XGSquad.GetNextGoodMember.ReturnValue> 00 ( 1B <GetNextGoodMember> 4A 4A 4A 4A 4A 4A 4A 16 ) 
//kIsRobotic = XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kGameCore.CharacterHasProperty(GetCharacter().m_kChar.iType, 3);
14 2D 00 <.kIsRobotic> 19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kGameCore> 00 ( 01 <XComGameReplicationInfo.m_kGameCore> ) [@] <XGTacticalGameCoreNativeBase.CharacterHasProperty.ReturnValue> 00 ( 1B <CharacterHasProperty> 35 <XGTacticalGameCoreNativeBase.TCharacter.iType> <XGTacticalGameCoreNativeBase.TCharacter> 00 00 19 1B <GetCharacter> 16 [@] <XGCharacter.m_kChar> 00 ( 01 <XGCharacter.m_kChar> ) 2C 03 16 ) 
//if(((SurvivingUnit != none) && !kIsRobotic) && !IsAlien_CheckByCharType())
07 [@label027] 82 82 77 00 <.SurvivingUnit> 2A 16 18 [@] ( 81 2D 00 <.kIsRobotic> 16 16 ) 18 [@] ( 81 1B <IsAlien_CheckByCharType> 16 16 16 ) 
    //SurvivingUnit.UnitSpeak(36);
    19 00 <.SurvivingUnit> [@] <NullRef> 00 ( 1B <UnitSpeak> 24 24 4A 16 ) 
[#label027]

//if(!kIsRobotic && GetSquad().GetPermanentIndex(self) != -1)
07 [@label028] 82 82 81 2D 00 <.kIsRobotic> 16 18 [@] ( 9B 19 1B <GetSquad> 16 [@] <XGSquad.GetPermanentIndex.ReturnValue> 00 ( 1B <GetPermanentIndex> 17 16 ) 1D <%i -1> 16 16 ) 18 [@] ( 81 1B <IsAlien_CheckByCharType> 16 16 16 ) 
	
	//E7 1F <%t "Test! XGUnit.OnDeath: MoraleEvent"> 2A 16
	
    //GetSquad().OnMoraleEvent(2, self);
    19 1B <GetSquad> 16 [@] <NullRef> 00 ( 1B <OnMoraleEvent> 24 02 17 16 ) 
[#label028]
//if(m_bForceVisible)
07 [@label029] 2D 01 <XGUnitNativeBase.m_bForceVisible> 
    //m_bForceVisible = false;
    14 2D 01 <XGUnitNativeBase.m_bForceVisible> 28 
[#label029]
//XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kCameraManager.RemoveMovingUnit(self);
19 19 2E <Class.XComGameReplicationInfo> 19 12 20 <Engine.Engine> [@] <Engine.Engine.GetCurrentWorldInfo.ReturnValue> 00 ( 1C <Engine.Engine.GetCurrentWorldInfo> 16 ) [@] <Engine.WorldInfo.GRI> 00 ( 01 <Engine.WorldInfo.GRI> ) [@] <XComGameReplicationInfo.m_kCameraManager> 00 ( 01 <XComGameReplicationInfo.m_kCameraManager> ) [@] <NullRef> 00 ( 1B <RemoveMovingUnit> 17 4A 16 ) 
//class'XComWorldData'.static.GetWorldData().ClearTileBlockedByUnitFlag(self);
19 12 20 <Class.XComWorldData> [@] <XComWorldData.GetWorldData.ReturnValue> 00 ( 1B <GetWorldData> 16 ) [@] <NullRef> 00 ( 1B <ClearTileBlockedByUnitFlag> 17 16 ) 
//return;
04 0B 
53 

